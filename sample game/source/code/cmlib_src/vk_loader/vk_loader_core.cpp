#include "vk_loader_core.h"

#include <stdio.h>
#if defined VK_LOADER_CORE_PRINT_ERRORS
#define print_msg(format, ...)		printf(format "\n", __VA_ARGS__)
#else
#define print_msg
#endif


// VK_VERSION_1_0
PFN_vkCreateInstance vkCreateInstance = nullptr;
PFN_vkDestroyInstance vkDestroyInstance = nullptr;
PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices = nullptr;
PFN_vkGetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures = nullptr;
PFN_vkGetPhysicalDeviceFormatProperties vkGetPhysicalDeviceFormatProperties = nullptr;
PFN_vkGetPhysicalDeviceImageFormatProperties vkGetPhysicalDeviceImageFormatProperties = nullptr;
PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties = nullptr;
PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties = nullptr;
PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties = nullptr;
PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr = nullptr;
PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr = nullptr;
PFN_vkCreateDevice vkCreateDevice = nullptr;
PFN_vkDestroyDevice vkDestroyDevice = nullptr;
PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties = nullptr;
PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties = nullptr;
PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties = nullptr;
PFN_vkEnumerateDeviceLayerProperties vkEnumerateDeviceLayerProperties = nullptr;
PFN_vkGetDeviceQueue vkGetDeviceQueue = nullptr;
PFN_vkQueueSubmit vkQueueSubmit = nullptr;
PFN_vkQueueWaitIdle vkQueueWaitIdle = nullptr;
PFN_vkDeviceWaitIdle vkDeviceWaitIdle = nullptr;
PFN_vkAllocateMemory vkAllocateMemory = nullptr;
PFN_vkFreeMemory vkFreeMemory = nullptr;
PFN_vkMapMemory vkMapMemory = nullptr;
PFN_vkUnmapMemory vkUnmapMemory = nullptr;
PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges = nullptr;
PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges = nullptr;
PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment = nullptr;
PFN_vkBindBufferMemory vkBindBufferMemory = nullptr;
PFN_vkBindImageMemory vkBindImageMemory = nullptr;
PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements = nullptr;
PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements = nullptr;
PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements = nullptr;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkGetPhysicalDeviceSparseImageFormatProperties = nullptr;
PFN_vkQueueBindSparse vkQueueBindSparse = nullptr;
PFN_vkCreateFence vkCreateFence = nullptr;
PFN_vkDestroyFence vkDestroyFence = nullptr;
PFN_vkResetFences vkResetFences = nullptr;
PFN_vkGetFenceStatus vkGetFenceStatus = nullptr;
PFN_vkWaitForFences vkWaitForFences = nullptr;
PFN_vkCreateSemaphore vkCreateSemaphore = nullptr;
PFN_vkDestroySemaphore vkDestroySemaphore = nullptr;
PFN_vkCreateEvent vkCreateEvent = nullptr;
PFN_vkDestroyEvent vkDestroyEvent = nullptr;
PFN_vkGetEventStatus vkGetEventStatus = nullptr;
PFN_vkSetEvent vkSetEvent = nullptr;
PFN_vkResetEvent vkResetEvent = nullptr;
PFN_vkCreateQueryPool vkCreateQueryPool = nullptr;
PFN_vkDestroyQueryPool vkDestroyQueryPool = nullptr;
PFN_vkGetQueryPoolResults vkGetQueryPoolResults = nullptr;
PFN_vkCreateBuffer vkCreateBuffer = nullptr;
PFN_vkDestroyBuffer vkDestroyBuffer = nullptr;
PFN_vkCreateBufferView vkCreateBufferView = nullptr;
PFN_vkDestroyBufferView vkDestroyBufferView = nullptr;
PFN_vkCreateImage vkCreateImage = nullptr;
PFN_vkDestroyImage vkDestroyImage = nullptr;
PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout = nullptr;
PFN_vkCreateImageView vkCreateImageView = nullptr;
PFN_vkDestroyImageView vkDestroyImageView = nullptr;
PFN_vkCreateShaderModule vkCreateShaderModule = nullptr;
PFN_vkDestroyShaderModule vkDestroyShaderModule = nullptr;
PFN_vkCreatePipelineCache vkCreatePipelineCache = nullptr;
PFN_vkDestroyPipelineCache vkDestroyPipelineCache = nullptr;
PFN_vkGetPipelineCacheData vkGetPipelineCacheData = nullptr;
PFN_vkMergePipelineCaches vkMergePipelineCaches = nullptr;
PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines = nullptr;
PFN_vkCreateComputePipelines vkCreateComputePipelines = nullptr;
PFN_vkDestroyPipeline vkDestroyPipeline = nullptr;
PFN_vkCreatePipelineLayout vkCreatePipelineLayout = nullptr;
PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout = nullptr;
PFN_vkCreateSampler vkCreateSampler = nullptr;
PFN_vkDestroySampler vkDestroySampler = nullptr;
PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout = nullptr;
PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout = nullptr;
PFN_vkCreateDescriptorPool vkCreateDescriptorPool = nullptr;
PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool = nullptr;
PFN_vkResetDescriptorPool vkResetDescriptorPool = nullptr;
PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets = nullptr;
PFN_vkFreeDescriptorSets vkFreeDescriptorSets = nullptr;
PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets = nullptr;
PFN_vkCreateFramebuffer vkCreateFramebuffer = nullptr;
PFN_vkDestroyFramebuffer vkDestroyFramebuffer = nullptr;
PFN_vkCreateRenderPass vkCreateRenderPass = nullptr;
PFN_vkDestroyRenderPass vkDestroyRenderPass = nullptr;
PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity = nullptr;
PFN_vkCreateCommandPool vkCreateCommandPool = nullptr;
PFN_vkDestroyCommandPool vkDestroyCommandPool = nullptr;
PFN_vkResetCommandPool vkResetCommandPool = nullptr;
PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers = nullptr;
PFN_vkFreeCommandBuffers vkFreeCommandBuffers = nullptr;
PFN_vkBeginCommandBuffer vkBeginCommandBuffer = nullptr;
PFN_vkEndCommandBuffer vkEndCommandBuffer = nullptr;
PFN_vkResetCommandBuffer vkResetCommandBuffer = nullptr;
PFN_vkCmdBindPipeline vkCmdBindPipeline = nullptr;
PFN_vkCmdSetViewport vkCmdSetViewport = nullptr;
PFN_vkCmdSetScissor vkCmdSetScissor = nullptr;
PFN_vkCmdSetLineWidth vkCmdSetLineWidth = nullptr;
PFN_vkCmdSetDepthBias vkCmdSetDepthBias = nullptr;
PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants = nullptr;
PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds = nullptr;
PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask = nullptr;
PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask = nullptr;
PFN_vkCmdSetStencilReference vkCmdSetStencilReference = nullptr;
PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets = nullptr;
PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer = nullptr;
PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers = nullptr;
PFN_vkCmdDraw vkCmdDraw = nullptr;
PFN_vkCmdDrawIndexed vkCmdDrawIndexed = nullptr;
PFN_vkCmdDrawIndirect vkCmdDrawIndirect = nullptr;
PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect = nullptr;
PFN_vkCmdDispatch vkCmdDispatch = nullptr;
PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect = nullptr;
PFN_vkCmdCopyBuffer vkCmdCopyBuffer = nullptr;
PFN_vkCmdCopyImage vkCmdCopyImage = nullptr;
PFN_vkCmdBlitImage vkCmdBlitImage = nullptr;
PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage = nullptr;
PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer = nullptr;
PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer = nullptr;
PFN_vkCmdFillBuffer vkCmdFillBuffer = nullptr;
PFN_vkCmdClearColorImage vkCmdClearColorImage = nullptr;
PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage = nullptr;
PFN_vkCmdClearAttachments vkCmdClearAttachments = nullptr;
PFN_vkCmdResolveImage vkCmdResolveImage = nullptr;
PFN_vkCmdSetEvent vkCmdSetEvent = nullptr;
PFN_vkCmdResetEvent vkCmdResetEvent = nullptr;
PFN_vkCmdWaitEvents vkCmdWaitEvents = nullptr;
PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier = nullptr;
PFN_vkCmdBeginQuery vkCmdBeginQuery = nullptr;
PFN_vkCmdEndQuery vkCmdEndQuery = nullptr;
PFN_vkCmdResetQueryPool vkCmdResetQueryPool = nullptr;
PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp = nullptr;
PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults = nullptr;
PFN_vkCmdPushConstants vkCmdPushConstants = nullptr;
PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass = nullptr;
PFN_vkCmdNextSubpass vkCmdNextSubpass = nullptr;
PFN_vkCmdEndRenderPass vkCmdEndRenderPass = nullptr;
PFN_vkCmdExecuteCommands vkCmdExecuteCommands = nullptr;
// VK_VERSION_1_1
PFN_vkEnumerateInstanceVersion vkEnumerateInstanceVersion = nullptr;
PFN_vkBindBufferMemory2 vkBindBufferMemory2 = nullptr;
PFN_vkBindImageMemory2 vkBindImageMemory2 = nullptr;
PFN_vkGetDeviceGroupPeerMemoryFeatures vkGetDeviceGroupPeerMemoryFeatures = nullptr;
PFN_vkCmdSetDeviceMask vkCmdSetDeviceMask = nullptr;
PFN_vkCmdDispatchBase vkCmdDispatchBase = nullptr;
PFN_vkEnumeratePhysicalDeviceGroups vkEnumeratePhysicalDeviceGroups = nullptr;
PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2 = nullptr;
PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2 = nullptr;
PFN_vkGetImageSparseMemoryRequirements2 vkGetImageSparseMemoryRequirements2 = nullptr;
PFN_vkGetPhysicalDeviceFeatures2 vkGetPhysicalDeviceFeatures2 = nullptr;
PFN_vkGetPhysicalDeviceProperties2 vkGetPhysicalDeviceProperties2 = nullptr;
PFN_vkGetPhysicalDeviceFormatProperties2 vkGetPhysicalDeviceFormatProperties2 = nullptr;
PFN_vkGetPhysicalDeviceImageFormatProperties2 vkGetPhysicalDeviceImageFormatProperties2 = nullptr;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2 vkGetPhysicalDeviceQueueFamilyProperties2 = nullptr;
PFN_vkGetPhysicalDeviceMemoryProperties2 vkGetPhysicalDeviceMemoryProperties2 = nullptr;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 vkGetPhysicalDeviceSparseImageFormatProperties2 = nullptr;
PFN_vkTrimCommandPool vkTrimCommandPool = nullptr;
PFN_vkGetDeviceQueue2 vkGetDeviceQueue2 = nullptr;
PFN_vkCreateSamplerYcbcrConversion vkCreateSamplerYcbcrConversion = nullptr;
PFN_vkDestroySamplerYcbcrConversion vkDestroySamplerYcbcrConversion = nullptr;
PFN_vkCreateDescriptorUpdateTemplate vkCreateDescriptorUpdateTemplate = nullptr;
PFN_vkDestroyDescriptorUpdateTemplate vkDestroyDescriptorUpdateTemplate = nullptr;
PFN_vkUpdateDescriptorSetWithTemplate vkUpdateDescriptorSetWithTemplate = nullptr;
PFN_vkGetPhysicalDeviceExternalBufferProperties vkGetPhysicalDeviceExternalBufferProperties = nullptr;
PFN_vkGetPhysicalDeviceExternalFenceProperties vkGetPhysicalDeviceExternalFenceProperties = nullptr;
PFN_vkGetPhysicalDeviceExternalSemaphoreProperties vkGetPhysicalDeviceExternalSemaphoreProperties = nullptr;
PFN_vkGetDescriptorSetLayoutSupport vkGetDescriptorSetLayoutSupport = nullptr;
// VK_VERSION_1_2
PFN_vkCmdDrawIndirectCount vkCmdDrawIndirectCount = nullptr;
PFN_vkCmdDrawIndexedIndirectCount vkCmdDrawIndexedIndirectCount = nullptr;
PFN_vkCreateRenderPass2 vkCreateRenderPass2 = nullptr;
PFN_vkCmdBeginRenderPass2 vkCmdBeginRenderPass2 = nullptr;
PFN_vkCmdNextSubpass2 vkCmdNextSubpass2 = nullptr;
PFN_vkCmdEndRenderPass2 vkCmdEndRenderPass2 = nullptr;
PFN_vkResetQueryPool vkResetQueryPool = nullptr;
PFN_vkGetSemaphoreCounterValue vkGetSemaphoreCounterValue = nullptr;
PFN_vkWaitSemaphores vkWaitSemaphores = nullptr;
PFN_vkSignalSemaphore vkSignalSemaphore = nullptr;
PFN_vkGetBufferDeviceAddress vkGetBufferDeviceAddress = nullptr;
PFN_vkGetBufferOpaqueCaptureAddress vkGetBufferOpaqueCaptureAddress = nullptr;
PFN_vkGetDeviceMemoryOpaqueCaptureAddress vkGetDeviceMemoryOpaqueCaptureAddress = nullptr;
// VK_VERSION_1_3
PFN_vkGetPhysicalDeviceToolProperties vkGetPhysicalDeviceToolProperties = nullptr;
PFN_vkCreatePrivateDataSlot vkCreatePrivateDataSlot = nullptr;
PFN_vkDestroyPrivateDataSlot vkDestroyPrivateDataSlot = nullptr;
PFN_vkSetPrivateData vkSetPrivateData = nullptr;
PFN_vkGetPrivateData vkGetPrivateData = nullptr;
PFN_vkCmdSetEvent2 vkCmdSetEvent2 = nullptr;
PFN_vkCmdResetEvent2 vkCmdResetEvent2 = nullptr;
PFN_vkCmdWaitEvents2 vkCmdWaitEvents2 = nullptr;
PFN_vkCmdPipelineBarrier2 vkCmdPipelineBarrier2 = nullptr;
PFN_vkCmdWriteTimestamp2 vkCmdWriteTimestamp2 = nullptr;
PFN_vkQueueSubmit2 vkQueueSubmit2 = nullptr;
PFN_vkCmdCopyBuffer2 vkCmdCopyBuffer2 = nullptr;
PFN_vkCmdCopyImage2 vkCmdCopyImage2 = nullptr;
PFN_vkCmdCopyBufferToImage2 vkCmdCopyBufferToImage2 = nullptr;
PFN_vkCmdCopyImageToBuffer2 vkCmdCopyImageToBuffer2 = nullptr;
PFN_vkCmdBlitImage2 vkCmdBlitImage2 = nullptr;
PFN_vkCmdResolveImage2 vkCmdResolveImage2 = nullptr;
PFN_vkCmdBeginRendering vkCmdBeginRendering = nullptr;
PFN_vkCmdEndRendering vkCmdEndRendering = nullptr;
PFN_vkCmdSetCullMode vkCmdSetCullMode = nullptr;
PFN_vkCmdSetFrontFace vkCmdSetFrontFace = nullptr;
PFN_vkCmdSetPrimitiveTopology vkCmdSetPrimitiveTopology = nullptr;
PFN_vkCmdSetViewportWithCount vkCmdSetViewportWithCount = nullptr;
PFN_vkCmdSetScissorWithCount vkCmdSetScissorWithCount = nullptr;
PFN_vkCmdBindVertexBuffers2 vkCmdBindVertexBuffers2 = nullptr;
PFN_vkCmdSetDepthTestEnable vkCmdSetDepthTestEnable = nullptr;
PFN_vkCmdSetDepthWriteEnable vkCmdSetDepthWriteEnable = nullptr;
PFN_vkCmdSetDepthCompareOp vkCmdSetDepthCompareOp = nullptr;
PFN_vkCmdSetDepthBoundsTestEnable vkCmdSetDepthBoundsTestEnable = nullptr;
PFN_vkCmdSetStencilTestEnable vkCmdSetStencilTestEnable = nullptr;
PFN_vkCmdSetStencilOp vkCmdSetStencilOp = nullptr;
PFN_vkCmdSetRasterizerDiscardEnable vkCmdSetRasterizerDiscardEnable = nullptr;
PFN_vkCmdSetDepthBiasEnable vkCmdSetDepthBiasEnable = nullptr;
PFN_vkCmdSetPrimitiveRestartEnable vkCmdSetPrimitiveRestartEnable = nullptr;
PFN_vkGetDeviceBufferMemoryRequirements vkGetDeviceBufferMemoryRequirements = nullptr;
PFN_vkGetDeviceImageMemoryRequirements vkGetDeviceImageMemoryRequirements = nullptr;
PFN_vkGetDeviceImageSparseMemoryRequirements vkGetDeviceImageSparseMemoryRequirements = nullptr;
PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR = nullptr;
PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR = nullptr;
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR = nullptr;
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR = nullptr;
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR = nullptr;
PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR = nullptr;
PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR = nullptr;
PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR = nullptr;
PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR = nullptr;
PFN_vkQueuePresentKHR vkQueuePresentKHR = nullptr;
PFN_vkGetDeviceGroupPresentCapabilitiesKHR vkGetDeviceGroupPresentCapabilitiesKHR = nullptr;
PFN_vkGetDeviceGroupSurfacePresentModesKHR vkGetDeviceGroupSurfacePresentModesKHR = nullptr;
PFN_vkGetPhysicalDevicePresentRectanglesKHR vkGetPhysicalDevicePresentRectanglesKHR = nullptr;
PFN_vkAcquireNextImage2KHR vkAcquireNextImage2KHR = nullptr;
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkGetPhysicalDeviceDisplayPropertiesKHR = nullptr;
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkGetPhysicalDeviceDisplayPlanePropertiesKHR = nullptr;
PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkGetDisplayPlaneSupportedDisplaysKHR = nullptr;
PFN_vkGetDisplayModePropertiesKHR vkGetDisplayModePropertiesKHR = nullptr;
PFN_vkCreateDisplayModeKHR vkCreateDisplayModeKHR = nullptr;
PFN_vkGetDisplayPlaneCapabilitiesKHR vkGetDisplayPlaneCapabilitiesKHR = nullptr;
PFN_vkCreateDisplayPlaneSurfaceKHR vkCreateDisplayPlaneSurfaceKHR = nullptr;
PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR = nullptr;
PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR vkGetPhysicalDeviceVideoCapabilitiesKHR = nullptr;
PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR vkGetPhysicalDeviceVideoFormatPropertiesKHR = nullptr;
PFN_vkCreateVideoSessionKHR vkCreateVideoSessionKHR = nullptr;
PFN_vkDestroyVideoSessionKHR vkDestroyVideoSessionKHR = nullptr;
PFN_vkGetVideoSessionMemoryRequirementsKHR vkGetVideoSessionMemoryRequirementsKHR = nullptr;
PFN_vkBindVideoSessionMemoryKHR vkBindVideoSessionMemoryKHR = nullptr;
PFN_vkCreateVideoSessionParametersKHR vkCreateVideoSessionParametersKHR = nullptr;
PFN_vkUpdateVideoSessionParametersKHR vkUpdateVideoSessionParametersKHR = nullptr;
PFN_vkDestroyVideoSessionParametersKHR vkDestroyVideoSessionParametersKHR = nullptr;
PFN_vkCmdBeginVideoCodingKHR vkCmdBeginVideoCodingKHR = nullptr;
PFN_vkCmdEndVideoCodingKHR vkCmdEndVideoCodingKHR = nullptr;
PFN_vkCmdControlVideoCodingKHR vkCmdControlVideoCodingKHR = nullptr;
PFN_vkCmdDecodeVideoKHR vkCmdDecodeVideoKHR = nullptr;
PFN_vkCmdBeginRenderingKHR vkCmdBeginRenderingKHR = nullptr;
PFN_vkCmdEndRenderingKHR vkCmdEndRenderingKHR = nullptr;
PFN_vkGetPhysicalDeviceFeatures2KHR vkGetPhysicalDeviceFeatures2KHR = nullptr;
PFN_vkGetPhysicalDeviceProperties2KHR vkGetPhysicalDeviceProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceFormatProperties2KHR vkGetPhysicalDeviceFormatProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR vkGetPhysicalDeviceImageFormatProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR vkGetPhysicalDeviceQueueFamilyProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceMemoryProperties2KHR vkGetPhysicalDeviceMemoryProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR vkGetPhysicalDeviceSparseImageFormatProperties2KHR = nullptr;
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR vkGetDeviceGroupPeerMemoryFeaturesKHR = nullptr;
PFN_vkCmdSetDeviceMaskKHR vkCmdSetDeviceMaskKHR = nullptr;
PFN_vkCmdDispatchBaseKHR vkCmdDispatchBaseKHR = nullptr;
PFN_vkTrimCommandPoolKHR vkTrimCommandPoolKHR = nullptr;
PFN_vkEnumeratePhysicalDeviceGroupsKHR vkEnumeratePhysicalDeviceGroupsKHR = nullptr;
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR vkGetPhysicalDeviceExternalBufferPropertiesKHR = nullptr;
PFN_vkGetMemoryFdKHR vkGetMemoryFdKHR = nullptr;
PFN_vkGetMemoryFdPropertiesKHR vkGetMemoryFdPropertiesKHR = nullptr;
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = nullptr;
PFN_vkImportSemaphoreFdKHR vkImportSemaphoreFdKHR = nullptr;
PFN_vkGetSemaphoreFdKHR vkGetSemaphoreFdKHR = nullptr;
PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR = nullptr;
PFN_vkCmdPushDescriptorSetWithTemplateKHR vkCmdPushDescriptorSetWithTemplateKHR = nullptr;
PFN_vkCreateDescriptorUpdateTemplateKHR vkCreateDescriptorUpdateTemplateKHR = nullptr;
PFN_vkDestroyDescriptorUpdateTemplateKHR vkDestroyDescriptorUpdateTemplateKHR = nullptr;
PFN_vkUpdateDescriptorSetWithTemplateKHR vkUpdateDescriptorSetWithTemplateKHR = nullptr;
PFN_vkCreateRenderPass2KHR vkCreateRenderPass2KHR = nullptr;
PFN_vkCmdBeginRenderPass2KHR vkCmdBeginRenderPass2KHR = nullptr;
PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR = nullptr;
PFN_vkCmdEndRenderPass2KHR vkCmdEndRenderPass2KHR = nullptr;
PFN_vkGetSwapchainStatusKHR vkGetSwapchainStatusKHR = nullptr;
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR vkGetPhysicalDeviceExternalFencePropertiesKHR = nullptr;
PFN_vkImportFenceFdKHR vkImportFenceFdKHR = nullptr;
PFN_vkGetFenceFdKHR vkGetFenceFdKHR = nullptr;
PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = nullptr;
PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = nullptr;
PFN_vkAcquireProfilingLockKHR vkAcquireProfilingLockKHR = nullptr;
PFN_vkReleaseProfilingLockKHR vkReleaseProfilingLockKHR = nullptr;
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR vkGetPhysicalDeviceSurfaceCapabilities2KHR = nullptr;
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR vkGetPhysicalDeviceSurfaceFormats2KHR = nullptr;
PFN_vkGetPhysicalDeviceDisplayProperties2KHR vkGetPhysicalDeviceDisplayProperties2KHR = nullptr;
PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR vkGetPhysicalDeviceDisplayPlaneProperties2KHR = nullptr;
PFN_vkGetDisplayModeProperties2KHR vkGetDisplayModeProperties2KHR = nullptr;
PFN_vkGetDisplayPlaneCapabilities2KHR vkGetDisplayPlaneCapabilities2KHR = nullptr;
PFN_vkGetImageMemoryRequirements2KHR vkGetImageMemoryRequirements2KHR = nullptr;
PFN_vkGetBufferMemoryRequirements2KHR vkGetBufferMemoryRequirements2KHR = nullptr;
PFN_vkGetImageSparseMemoryRequirements2KHR vkGetImageSparseMemoryRequirements2KHR = nullptr;
PFN_vkCreateSamplerYcbcrConversionKHR vkCreateSamplerYcbcrConversionKHR = nullptr;
PFN_vkDestroySamplerYcbcrConversionKHR vkDestroySamplerYcbcrConversionKHR = nullptr;
PFN_vkBindBufferMemory2KHR vkBindBufferMemory2KHR = nullptr;
PFN_vkBindImageMemory2KHR vkBindImageMemory2KHR = nullptr;
PFN_vkGetDescriptorSetLayoutSupportKHR vkGetDescriptorSetLayoutSupportKHR = nullptr;
PFN_vkCmdDrawIndirectCountKHR vkCmdDrawIndirectCountKHR = nullptr;
PFN_vkCmdDrawIndexedIndirectCountKHR vkCmdDrawIndexedIndirectCountKHR = nullptr;
PFN_vkGetSemaphoreCounterValueKHR vkGetSemaphoreCounterValueKHR = nullptr;
PFN_vkWaitSemaphoresKHR vkWaitSemaphoresKHR = nullptr;
PFN_vkSignalSemaphoreKHR vkSignalSemaphoreKHR = nullptr;
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR vkGetPhysicalDeviceFragmentShadingRatesKHR = nullptr;
PFN_vkCmdSetFragmentShadingRateKHR vkCmdSetFragmentShadingRateKHR = nullptr;
PFN_vkCmdSetRenderingAttachmentLocationsKHR vkCmdSetRenderingAttachmentLocationsKHR = nullptr;
PFN_vkCmdSetRenderingInputAttachmentIndicesKHR vkCmdSetRenderingInputAttachmentIndicesKHR = nullptr;
PFN_vkWaitForPresentKHR vkWaitForPresentKHR = nullptr;
PFN_vkGetBufferDeviceAddressKHR vkGetBufferDeviceAddressKHR = nullptr;
PFN_vkGetBufferOpaqueCaptureAddressKHR vkGetBufferOpaqueCaptureAddressKHR = nullptr;
PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR vkGetDeviceMemoryOpaqueCaptureAddressKHR = nullptr;
PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperationKHR = nullptr;
PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperationKHR = nullptr;
PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrencyKHR = nullptr;
PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResultKHR = nullptr;
PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoinKHR = nullptr;
PFN_vkGetPipelineExecutablePropertiesKHR vkGetPipelineExecutablePropertiesKHR = nullptr;
PFN_vkGetPipelineExecutableStatisticsKHR vkGetPipelineExecutableStatisticsKHR = nullptr;
PFN_vkGetPipelineExecutableInternalRepresentationsKHR vkGetPipelineExecutableInternalRepresentationsKHR = nullptr;
PFN_vkMapMemory2KHR vkMapMemory2KHR = nullptr;
PFN_vkUnmapMemory2KHR vkUnmapMemory2KHR = nullptr;
PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = nullptr;
PFN_vkGetEncodedVideoSessionParametersKHR vkGetEncodedVideoSessionParametersKHR = nullptr;
PFN_vkCmdEncodeVideoKHR vkCmdEncodeVideoKHR = nullptr;
PFN_vkCmdSetEvent2KHR vkCmdSetEvent2KHR = nullptr;
PFN_vkCmdResetEvent2KHR vkCmdResetEvent2KHR = nullptr;
PFN_vkCmdWaitEvents2KHR vkCmdWaitEvents2KHR = nullptr;
PFN_vkCmdPipelineBarrier2KHR vkCmdPipelineBarrier2KHR = nullptr;
PFN_vkCmdWriteTimestamp2KHR vkCmdWriteTimestamp2KHR = nullptr;
PFN_vkQueueSubmit2KHR vkQueueSubmit2KHR = nullptr;
PFN_vkCmdWriteBufferMarker2AMD vkCmdWriteBufferMarker2AMD = nullptr;
PFN_vkGetQueueCheckpointData2NV vkGetQueueCheckpointData2NV = nullptr;
PFN_vkCmdCopyBuffer2KHR vkCmdCopyBuffer2KHR = nullptr;
PFN_vkCmdCopyImage2KHR vkCmdCopyImage2KHR = nullptr;
PFN_vkCmdCopyBufferToImage2KHR vkCmdCopyBufferToImage2KHR = nullptr;
PFN_vkCmdCopyImageToBuffer2KHR vkCmdCopyImageToBuffer2KHR = nullptr;
PFN_vkCmdBlitImage2KHR vkCmdBlitImage2KHR = nullptr;
PFN_vkCmdResolveImage2KHR vkCmdResolveImage2KHR = nullptr;
PFN_vkCmdTraceRaysIndirect2KHR vkCmdTraceRaysIndirect2KHR = nullptr;
PFN_vkGetDeviceBufferMemoryRequirementsKHR vkGetDeviceBufferMemoryRequirementsKHR = nullptr;
PFN_vkGetDeviceImageMemoryRequirementsKHR vkGetDeviceImageMemoryRequirementsKHR = nullptr;
PFN_vkGetDeviceImageSparseMemoryRequirementsKHR vkGetDeviceImageSparseMemoryRequirementsKHR = nullptr;
PFN_vkCmdBindIndexBuffer2KHR vkCmdBindIndexBuffer2KHR = nullptr;
PFN_vkGetRenderingAreaGranularityKHR vkGetRenderingAreaGranularityKHR = nullptr;
PFN_vkGetDeviceImageSubresourceLayoutKHR vkGetDeviceImageSubresourceLayoutKHR = nullptr;
PFN_vkGetImageSubresourceLayout2KHR vkGetImageSubresourceLayout2KHR = nullptr;
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = nullptr;
PFN_vkCmdSetLineStippleKHR vkCmdSetLineStippleKHR = nullptr;
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = nullptr;
PFN_vkGetCalibratedTimestampsKHR vkGetCalibratedTimestampsKHR = nullptr;
PFN_vkCmdBindDescriptorSets2KHR vkCmdBindDescriptorSets2KHR = nullptr;
PFN_vkCmdPushConstants2KHR vkCmdPushConstants2KHR = nullptr;
PFN_vkCmdPushDescriptorSet2KHR vkCmdPushDescriptorSet2KHR = nullptr;
PFN_vkCmdPushDescriptorSetWithTemplate2KHR vkCmdPushDescriptorSetWithTemplate2KHR = nullptr;
PFN_vkCmdSetDescriptorBufferOffsets2EXT vkCmdSetDescriptorBufferOffsets2EXT = nullptr;
PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = nullptr;
PFN_vkCreateDebugReportCallbackEXT vkCreateDebugReportCallbackEXT = nullptr;
PFN_vkDestroyDebugReportCallbackEXT vkDestroyDebugReportCallbackEXT = nullptr;
PFN_vkDebugReportMessageEXT vkDebugReportMessageEXT = nullptr;
PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT = nullptr;
PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT = nullptr;
PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT = nullptr;
PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT = nullptr;
PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT = nullptr;
PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT = nullptr;
PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT = nullptr;
PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT = nullptr;
PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT = nullptr;
PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT = nullptr;
PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT = nullptr;
PFN_vkCreateCuModuleNVX vkCreateCuModuleNVX = nullptr;
PFN_vkCreateCuFunctionNVX vkCreateCuFunctionNVX = nullptr;
PFN_vkDestroyCuModuleNVX vkDestroyCuModuleNVX = nullptr;
PFN_vkDestroyCuFunctionNVX vkDestroyCuFunctionNVX = nullptr;
PFN_vkCmdCuLaunchKernelNVX vkCmdCuLaunchKernelNVX = nullptr;
PFN_vkGetImageViewHandleNVX vkGetImageViewHandleNVX = nullptr;
PFN_vkGetImageViewAddressNVX vkGetImageViewAddressNVX = nullptr;
PFN_vkCmdDrawIndirectCountAMD vkCmdDrawIndirectCountAMD = nullptr;
PFN_vkCmdDrawIndexedIndirectCountAMD vkCmdDrawIndexedIndirectCountAMD = nullptr;
PFN_vkGetShaderInfoAMD vkGetShaderInfoAMD = nullptr;
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV vkGetPhysicalDeviceExternalImageFormatPropertiesNV = nullptr;
PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT = nullptr;
PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT = nullptr;
PFN_vkCmdSetViewportWScalingNV vkCmdSetViewportWScalingNV = nullptr;
PFN_vkReleaseDisplayEXT vkReleaseDisplayEXT = nullptr;
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT vkGetPhysicalDeviceSurfaceCapabilities2EXT = nullptr;
PFN_vkDisplayPowerControlEXT vkDisplayPowerControlEXT = nullptr;
PFN_vkRegisterDeviceEventEXT vkRegisterDeviceEventEXT = nullptr;
PFN_vkRegisterDisplayEventEXT vkRegisterDisplayEventEXT = nullptr;
PFN_vkGetSwapchainCounterEXT vkGetSwapchainCounterEXT = nullptr;
PFN_vkGetRefreshCycleDurationGOOGLE vkGetRefreshCycleDurationGOOGLE = nullptr;
PFN_vkGetPastPresentationTimingGOOGLE vkGetPastPresentationTimingGOOGLE = nullptr;
PFN_vkCmdSetDiscardRectangleEXT vkCmdSetDiscardRectangleEXT = nullptr;
PFN_vkCmdSetDiscardRectangleEnableEXT vkCmdSetDiscardRectangleEnableEXT = nullptr;
PFN_vkCmdSetDiscardRectangleModeEXT vkCmdSetDiscardRectangleModeEXT = nullptr;
PFN_vkSetHdrMetadataEXT vkSetHdrMetadataEXT = nullptr;
PFN_vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectNameEXT = nullptr;
PFN_vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectTagEXT = nullptr;
PFN_vkQueueBeginDebugUtilsLabelEXT vkQueueBeginDebugUtilsLabelEXT = nullptr;
PFN_vkQueueEndDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT = nullptr;
PFN_vkQueueInsertDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT = nullptr;
PFN_vkCmdBeginDebugUtilsLabelEXT vkCmdBeginDebugUtilsLabelEXT = nullptr;
PFN_vkCmdEndDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT = nullptr;
PFN_vkCmdInsertDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT = nullptr;
PFN_vkCreateDebugUtilsMessengerEXT vkCreateDebugUtilsMessengerEXT = nullptr;
PFN_vkDestroyDebugUtilsMessengerEXT vkDestroyDebugUtilsMessengerEXT = nullptr;
PFN_vkSubmitDebugUtilsMessageEXT vkSubmitDebugUtilsMessageEXT = nullptr;
PFN_vkCmdSetSampleLocationsEXT vkCmdSetSampleLocationsEXT = nullptr;
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT vkGetPhysicalDeviceMultisamplePropertiesEXT = nullptr;
PFN_vkGetImageDrmFormatModifierPropertiesEXT vkGetImageDrmFormatModifierPropertiesEXT = nullptr;
PFN_vkCreateValidationCacheEXT vkCreateValidationCacheEXT = nullptr;
PFN_vkDestroyValidationCacheEXT vkDestroyValidationCacheEXT = nullptr;
PFN_vkMergeValidationCachesEXT vkMergeValidationCachesEXT = nullptr;
PFN_vkGetValidationCacheDataEXT vkGetValidationCacheDataEXT = nullptr;
PFN_vkCmdBindShadingRateImageNV vkCmdBindShadingRateImageNV = nullptr;
PFN_vkCmdSetViewportShadingRatePaletteNV vkCmdSetViewportShadingRatePaletteNV = nullptr;
PFN_vkCmdSetCoarseSampleOrderNV vkCmdSetCoarseSampleOrderNV = nullptr;
PFN_vkCreateAccelerationStructureNV vkCreateAccelerationStructureNV = nullptr;
PFN_vkDestroyAccelerationStructureNV vkDestroyAccelerationStructureNV = nullptr;
PFN_vkGetAccelerationStructureMemoryRequirementsNV vkGetAccelerationStructureMemoryRequirementsNV = nullptr;
PFN_vkBindAccelerationStructureMemoryNV vkBindAccelerationStructureMemoryNV = nullptr;
PFN_vkCmdBuildAccelerationStructureNV vkCmdBuildAccelerationStructureNV = nullptr;
PFN_vkCmdCopyAccelerationStructureNV vkCmdCopyAccelerationStructureNV = nullptr;
PFN_vkCmdTraceRaysNV vkCmdTraceRaysNV = nullptr;
PFN_vkCreateRayTracingPipelinesNV vkCreateRayTracingPipelinesNV = nullptr;
PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR = nullptr;
PFN_vkGetRayTracingShaderGroupHandlesNV vkGetRayTracingShaderGroupHandlesNV = nullptr;
PFN_vkGetAccelerationStructureHandleNV vkGetAccelerationStructureHandleNV = nullptr;
PFN_vkCmdWriteAccelerationStructuresPropertiesNV vkCmdWriteAccelerationStructuresPropertiesNV = nullptr;
PFN_vkCompileDeferredNV vkCompileDeferredNV = nullptr;
PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT = nullptr;
PFN_vkCmdWriteBufferMarkerAMD vkCmdWriteBufferMarkerAMD = nullptr;
PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = nullptr;
PFN_vkGetCalibratedTimestampsEXT vkGetCalibratedTimestampsEXT = nullptr;
PFN_vkCmdDrawMeshTasksNV vkCmdDrawMeshTasksNV = nullptr;
PFN_vkCmdDrawMeshTasksIndirectNV vkCmdDrawMeshTasksIndirectNV = nullptr;
PFN_vkCmdDrawMeshTasksIndirectCountNV vkCmdDrawMeshTasksIndirectCountNV = nullptr;
PFN_vkCmdSetExclusiveScissorEnableNV vkCmdSetExclusiveScissorEnableNV = nullptr;
PFN_vkCmdSetExclusiveScissorNV vkCmdSetExclusiveScissorNV = nullptr;
PFN_vkCmdSetCheckpointNV vkCmdSetCheckpointNV = nullptr;
PFN_vkGetQueueCheckpointDataNV vkGetQueueCheckpointDataNV = nullptr;
PFN_vkInitializePerformanceApiINTEL vkInitializePerformanceApiINTEL = nullptr;
PFN_vkUninitializePerformanceApiINTEL vkUninitializePerformanceApiINTEL = nullptr;
PFN_vkCmdSetPerformanceMarkerINTEL vkCmdSetPerformanceMarkerINTEL = nullptr;
PFN_vkCmdSetPerformanceStreamMarkerINTEL vkCmdSetPerformanceStreamMarkerINTEL = nullptr;
PFN_vkCmdSetPerformanceOverrideINTEL vkCmdSetPerformanceOverrideINTEL = nullptr;
PFN_vkAcquirePerformanceConfigurationINTEL vkAcquirePerformanceConfigurationINTEL = nullptr;
PFN_vkReleasePerformanceConfigurationINTEL vkReleasePerformanceConfigurationINTEL = nullptr;
PFN_vkQueueSetPerformanceConfigurationINTEL vkQueueSetPerformanceConfigurationINTEL = nullptr;
PFN_vkGetPerformanceParameterINTEL vkGetPerformanceParameterINTEL = nullptr;
PFN_vkSetLocalDimmingAMD vkSetLocalDimmingAMD = nullptr;
PFN_vkGetBufferDeviceAddressEXT vkGetBufferDeviceAddressEXT = nullptr;
PFN_vkGetPhysicalDeviceToolPropertiesEXT vkGetPhysicalDeviceToolPropertiesEXT = nullptr;
PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = nullptr;
PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = nullptr;
PFN_vkCreateHeadlessSurfaceEXT vkCreateHeadlessSurfaceEXT = nullptr;
PFN_vkCmdSetLineStippleEXT vkCmdSetLineStippleEXT = nullptr;
PFN_vkResetQueryPoolEXT vkResetQueryPoolEXT = nullptr;
PFN_vkCmdSetCullModeEXT vkCmdSetCullModeEXT = nullptr;
PFN_vkCmdSetFrontFaceEXT vkCmdSetFrontFaceEXT = nullptr;
PFN_vkCmdSetPrimitiveTopologyEXT vkCmdSetPrimitiveTopologyEXT = nullptr;
PFN_vkCmdSetViewportWithCountEXT vkCmdSetViewportWithCountEXT = nullptr;
PFN_vkCmdSetScissorWithCountEXT vkCmdSetScissorWithCountEXT = nullptr;
PFN_vkCmdBindVertexBuffers2EXT vkCmdBindVertexBuffers2EXT = nullptr;
PFN_vkCmdSetDepthTestEnableEXT vkCmdSetDepthTestEnableEXT = nullptr;
PFN_vkCmdSetDepthWriteEnableEXT vkCmdSetDepthWriteEnableEXT = nullptr;
PFN_vkCmdSetDepthCompareOpEXT vkCmdSetDepthCompareOpEXT = nullptr;
PFN_vkCmdSetDepthBoundsTestEnableEXT vkCmdSetDepthBoundsTestEnableEXT = nullptr;
PFN_vkCmdSetStencilTestEnableEXT vkCmdSetStencilTestEnableEXT = nullptr;
PFN_vkCmdSetStencilOpEXT vkCmdSetStencilOpEXT = nullptr;
PFN_vkCopyMemoryToImageEXT vkCopyMemoryToImageEXT = nullptr;
PFN_vkCopyImageToMemoryEXT vkCopyImageToMemoryEXT = nullptr;
PFN_vkCopyImageToImageEXT vkCopyImageToImageEXT = nullptr;
PFN_vkTransitionImageLayoutEXT vkTransitionImageLayoutEXT = nullptr;
PFN_vkGetImageSubresourceLayout2EXT vkGetImageSubresourceLayout2EXT = nullptr;
PFN_vkReleaseSwapchainImagesEXT vkReleaseSwapchainImagesEXT = nullptr;
PFN_vkGetGeneratedCommandsMemoryRequirementsNV vkGetGeneratedCommandsMemoryRequirementsNV = nullptr;
PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV = nullptr;
PFN_vkCmdExecuteGeneratedCommandsNV vkCmdExecuteGeneratedCommandsNV = nullptr;
PFN_vkCmdBindPipelineShaderGroupNV vkCmdBindPipelineShaderGroupNV = nullptr;
PFN_vkCreateIndirectCommandsLayoutNV vkCreateIndirectCommandsLayoutNV = nullptr;
PFN_vkDestroyIndirectCommandsLayoutNV vkDestroyIndirectCommandsLayoutNV = nullptr;
PFN_vkCmdSetDepthBias2EXT vkCmdSetDepthBias2EXT = nullptr;
PFN_vkAcquireDrmDisplayEXT vkAcquireDrmDisplayEXT = nullptr;
PFN_vkGetDrmDisplayEXT vkGetDrmDisplayEXT = nullptr;
PFN_vkCreatePrivateDataSlotEXT vkCreatePrivateDataSlotEXT = nullptr;
PFN_vkDestroyPrivateDataSlotEXT vkDestroyPrivateDataSlotEXT = nullptr;
PFN_vkSetPrivateDataEXT vkSetPrivateDataEXT = nullptr;
PFN_vkGetPrivateDataEXT vkGetPrivateDataEXT = nullptr;
PFN_vkCreateCudaModuleNV vkCreateCudaModuleNV = nullptr;
PFN_vkGetCudaModuleCacheNV vkGetCudaModuleCacheNV = nullptr;
PFN_vkCreateCudaFunctionNV vkCreateCudaFunctionNV = nullptr;
PFN_vkDestroyCudaModuleNV vkDestroyCudaModuleNV = nullptr;
PFN_vkDestroyCudaFunctionNV vkDestroyCudaFunctionNV = nullptr;
PFN_vkCmdCudaLaunchKernelNV vkCmdCudaLaunchKernelNV = nullptr;
PFN_vkGetDescriptorSetLayoutSizeEXT vkGetDescriptorSetLayoutSizeEXT = nullptr;
PFN_vkGetDescriptorSetLayoutBindingOffsetEXT vkGetDescriptorSetLayoutBindingOffsetEXT = nullptr;
PFN_vkGetDescriptorEXT vkGetDescriptorEXT = nullptr;
PFN_vkCmdBindDescriptorBuffersEXT vkCmdBindDescriptorBuffersEXT = nullptr;
PFN_vkCmdSetDescriptorBufferOffsetsEXT vkCmdSetDescriptorBufferOffsetsEXT = nullptr;
PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT vkCmdBindDescriptorBufferEmbeddedSamplersEXT = nullptr;
PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT vkGetBufferOpaqueCaptureDescriptorDataEXT = nullptr;
PFN_vkGetImageOpaqueCaptureDescriptorDataEXT vkGetImageOpaqueCaptureDescriptorDataEXT = nullptr;
PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT vkGetImageViewOpaqueCaptureDescriptorDataEXT = nullptr;
PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT vkGetSamplerOpaqueCaptureDescriptorDataEXT = nullptr;
PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = nullptr;
PFN_vkCmdSetFragmentShadingRateEnumNV vkCmdSetFragmentShadingRateEnumNV = nullptr;
PFN_vkGetDeviceFaultInfoEXT vkGetDeviceFaultInfoEXT = nullptr;
PFN_vkCmdSetVertexInputEXT vkCmdSetVertexInputEXT = nullptr;
PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = nullptr;
PFN_vkCmdSubpassShadingHUAWEI vkCmdSubpassShadingHUAWEI = nullptr;
PFN_vkCmdBindInvocationMaskHUAWEI vkCmdBindInvocationMaskHUAWEI = nullptr;
PFN_vkGetMemoryRemoteAddressNV vkGetMemoryRemoteAddressNV = nullptr;
PFN_vkGetPipelinePropertiesEXT vkGetPipelinePropertiesEXT = nullptr;
PFN_vkCmdSetPatchControlPointsEXT vkCmdSetPatchControlPointsEXT = nullptr;
PFN_vkCmdSetRasterizerDiscardEnableEXT vkCmdSetRasterizerDiscardEnableEXT = nullptr;
PFN_vkCmdSetDepthBiasEnableEXT vkCmdSetDepthBiasEnableEXT = nullptr;
PFN_vkCmdSetLogicOpEXT vkCmdSetLogicOpEXT = nullptr;
PFN_vkCmdSetPrimitiveRestartEnableEXT vkCmdSetPrimitiveRestartEnableEXT = nullptr;
PFN_vkCmdSetColorWriteEnableEXT vkCmdSetColorWriteEnableEXT = nullptr;
PFN_vkCmdDrawMultiEXT vkCmdDrawMultiEXT = nullptr;
PFN_vkCmdDrawMultiIndexedEXT vkCmdDrawMultiIndexedEXT = nullptr;
PFN_vkCreateMicromapEXT vkCreateMicromapEXT = nullptr;
PFN_vkDestroyMicromapEXT vkDestroyMicromapEXT = nullptr;
PFN_vkCmdBuildMicromapsEXT vkCmdBuildMicromapsEXT = nullptr;
PFN_vkBuildMicromapsEXT vkBuildMicromapsEXT = nullptr;
PFN_vkCopyMicromapEXT vkCopyMicromapEXT = nullptr;
PFN_vkCopyMicromapToMemoryEXT vkCopyMicromapToMemoryEXT = nullptr;
PFN_vkCopyMemoryToMicromapEXT vkCopyMemoryToMicromapEXT = nullptr;
PFN_vkWriteMicromapsPropertiesEXT vkWriteMicromapsPropertiesEXT = nullptr;
PFN_vkCmdCopyMicromapEXT vkCmdCopyMicromapEXT = nullptr;
PFN_vkCmdCopyMicromapToMemoryEXT vkCmdCopyMicromapToMemoryEXT = nullptr;
PFN_vkCmdCopyMemoryToMicromapEXT vkCmdCopyMemoryToMicromapEXT = nullptr;
PFN_vkCmdWriteMicromapsPropertiesEXT vkCmdWriteMicromapsPropertiesEXT = nullptr;
PFN_vkGetDeviceMicromapCompatibilityEXT vkGetDeviceMicromapCompatibilityEXT = nullptr;
PFN_vkGetMicromapBuildSizesEXT vkGetMicromapBuildSizesEXT = nullptr;
PFN_vkCmdDrawClusterHUAWEI vkCmdDrawClusterHUAWEI = nullptr;
PFN_vkCmdDrawClusterIndirectHUAWEI vkCmdDrawClusterIndirectHUAWEI = nullptr;
PFN_vkSetDeviceMemoryPriorityEXT vkSetDeviceMemoryPriorityEXT = nullptr;
PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE vkGetDescriptorSetLayoutHostMappingInfoVALVE = nullptr;
PFN_vkGetDescriptorSetHostMappingVALVE vkGetDescriptorSetHostMappingVALVE = nullptr;
PFN_vkCmdCopyMemoryIndirectNV vkCmdCopyMemoryIndirectNV = nullptr;
PFN_vkCmdCopyMemoryToImageIndirectNV vkCmdCopyMemoryToImageIndirectNV = nullptr;
PFN_vkCmdDecompressMemoryNV vkCmdDecompressMemoryNV = nullptr;
PFN_vkCmdDecompressMemoryIndirectCountNV vkCmdDecompressMemoryIndirectCountNV = nullptr;
PFN_vkGetPipelineIndirectMemoryRequirementsNV vkGetPipelineIndirectMemoryRequirementsNV = nullptr;
PFN_vkCmdUpdatePipelineIndirectBufferNV vkCmdUpdatePipelineIndirectBufferNV = nullptr;
PFN_vkGetPipelineIndirectDeviceAddressNV vkGetPipelineIndirectDeviceAddressNV = nullptr;
PFN_vkCmdSetDepthClampEnableEXT vkCmdSetDepthClampEnableEXT = nullptr;
PFN_vkCmdSetPolygonModeEXT vkCmdSetPolygonModeEXT = nullptr;
PFN_vkCmdSetRasterizationSamplesEXT vkCmdSetRasterizationSamplesEXT = nullptr;
PFN_vkCmdSetSampleMaskEXT vkCmdSetSampleMaskEXT = nullptr;
PFN_vkCmdSetAlphaToCoverageEnableEXT vkCmdSetAlphaToCoverageEnableEXT = nullptr;
PFN_vkCmdSetAlphaToOneEnableEXT vkCmdSetAlphaToOneEnableEXT = nullptr;
PFN_vkCmdSetLogicOpEnableEXT vkCmdSetLogicOpEnableEXT = nullptr;
PFN_vkCmdSetColorBlendEnableEXT vkCmdSetColorBlendEnableEXT = nullptr;
PFN_vkCmdSetColorBlendEquationEXT vkCmdSetColorBlendEquationEXT = nullptr;
PFN_vkCmdSetColorWriteMaskEXT vkCmdSetColorWriteMaskEXT = nullptr;
PFN_vkCmdSetTessellationDomainOriginEXT vkCmdSetTessellationDomainOriginEXT = nullptr;
PFN_vkCmdSetRasterizationStreamEXT vkCmdSetRasterizationStreamEXT = nullptr;
PFN_vkCmdSetConservativeRasterizationModeEXT vkCmdSetConservativeRasterizationModeEXT = nullptr;
PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT vkCmdSetExtraPrimitiveOverestimationSizeEXT = nullptr;
PFN_vkCmdSetDepthClipEnableEXT vkCmdSetDepthClipEnableEXT = nullptr;
PFN_vkCmdSetSampleLocationsEnableEXT vkCmdSetSampleLocationsEnableEXT = nullptr;
PFN_vkCmdSetColorBlendAdvancedEXT vkCmdSetColorBlendAdvancedEXT = nullptr;
PFN_vkCmdSetProvokingVertexModeEXT vkCmdSetProvokingVertexModeEXT = nullptr;
PFN_vkCmdSetLineRasterizationModeEXT vkCmdSetLineRasterizationModeEXT = nullptr;
PFN_vkCmdSetLineStippleEnableEXT vkCmdSetLineStippleEnableEXT = nullptr;
PFN_vkCmdSetDepthClipNegativeOneToOneEXT vkCmdSetDepthClipNegativeOneToOneEXT = nullptr;
PFN_vkCmdSetViewportWScalingEnableNV vkCmdSetViewportWScalingEnableNV = nullptr;
PFN_vkCmdSetViewportSwizzleNV vkCmdSetViewportSwizzleNV = nullptr;
PFN_vkCmdSetCoverageToColorEnableNV vkCmdSetCoverageToColorEnableNV = nullptr;
PFN_vkCmdSetCoverageToColorLocationNV vkCmdSetCoverageToColorLocationNV = nullptr;
PFN_vkCmdSetCoverageModulationModeNV vkCmdSetCoverageModulationModeNV = nullptr;
PFN_vkCmdSetCoverageModulationTableEnableNV vkCmdSetCoverageModulationTableEnableNV = nullptr;
PFN_vkCmdSetCoverageModulationTableNV vkCmdSetCoverageModulationTableNV = nullptr;
PFN_vkCmdSetShadingRateImageEnableNV vkCmdSetShadingRateImageEnableNV = nullptr;
PFN_vkCmdSetRepresentativeFragmentTestEnableNV vkCmdSetRepresentativeFragmentTestEnableNV = nullptr;
PFN_vkCmdSetCoverageReductionModeNV vkCmdSetCoverageReductionModeNV = nullptr;
PFN_vkGetShaderModuleIdentifierEXT vkGetShaderModuleIdentifierEXT = nullptr;
PFN_vkGetShaderModuleCreateInfoIdentifierEXT vkGetShaderModuleCreateInfoIdentifierEXT = nullptr;
PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV vkGetPhysicalDeviceOpticalFlowImageFormatsNV = nullptr;
PFN_vkCreateOpticalFlowSessionNV vkCreateOpticalFlowSessionNV = nullptr;
PFN_vkDestroyOpticalFlowSessionNV vkDestroyOpticalFlowSessionNV = nullptr;
PFN_vkBindOpticalFlowSessionImageNV vkBindOpticalFlowSessionImageNV = nullptr;
PFN_vkCmdOpticalFlowExecuteNV vkCmdOpticalFlowExecuteNV = nullptr;
PFN_vkCreateShadersEXT vkCreateShadersEXT = nullptr;
PFN_vkDestroyShaderEXT vkDestroyShaderEXT = nullptr;
PFN_vkGetShaderBinaryDataEXT vkGetShaderBinaryDataEXT = nullptr;
PFN_vkCmdBindShadersEXT vkCmdBindShadersEXT = nullptr;
PFN_vkGetFramebufferTilePropertiesQCOM vkGetFramebufferTilePropertiesQCOM = nullptr;
PFN_vkGetDynamicRenderingTilePropertiesQCOM vkGetDynamicRenderingTilePropertiesQCOM = nullptr;
PFN_vkSetLatencySleepModeNV vkSetLatencySleepModeNV = nullptr;
PFN_vkLatencySleepNV vkLatencySleepNV = nullptr;
PFN_vkSetLatencyMarkerNV vkSetLatencyMarkerNV = nullptr;
PFN_vkGetLatencyTimingsNV vkGetLatencyTimingsNV = nullptr;
PFN_vkQueueNotifyOutOfBandNV vkQueueNotifyOutOfBandNV = nullptr;
PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT vkCmdSetAttachmentFeedbackLoopEnableEXT = nullptr;
PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR = nullptr;
PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR = nullptr;
PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR = nullptr;
PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirectKHR = nullptr;
PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructuresKHR = nullptr;
PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructureKHR = nullptr;
PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemoryKHR = nullptr;
PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructureKHR = nullptr;
PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresPropertiesKHR = nullptr;
PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructureKHR = nullptr;
PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemoryKHR = nullptr;
PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructureKHR = nullptr;
PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR = nullptr;
PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresPropertiesKHR = nullptr;
PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibilityKHR = nullptr;
PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR = nullptr;
PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR = nullptr;
PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR = nullptr;
PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = nullptr;
PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirectKHR = nullptr;
PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSizeKHR = nullptr;
PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSizeKHR = nullptr;
PFN_vkCmdDrawMeshTasksEXT vkCmdDrawMeshTasksEXT = nullptr;
PFN_vkCmdDrawMeshTasksIndirectEXT vkCmdDrawMeshTasksIndirectEXT = nullptr;
PFN_vkCmdDrawMeshTasksIndirectCountEXT vkCmdDrawMeshTasksIndirectCountEXT = nullptr;


void vkfnlib_init_VK_VERSION_1_0(PFN_loadfunc_vk load, VkInstance vk_instance) {
	//vkCreateInstance = (PFN_vkCreateInstance)load(vk_instance, "vkCreateInstance");
	//if (!vkCreateInstance) { print_msg("vkCreateInstance not loaded"); }
	vkDestroyInstance = (PFN_vkDestroyInstance)load(vk_instance, "vkDestroyInstance");
	if (!vkDestroyInstance) { print_msg("vkDestroyInstance not loaded"); }
	vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices)load(vk_instance, "vkEnumeratePhysicalDevices");
	if (!vkEnumeratePhysicalDevices) { print_msg("vkEnumeratePhysicalDevices not loaded"); }
	vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures)load(vk_instance, "vkGetPhysicalDeviceFeatures");
	if (!vkGetPhysicalDeviceFeatures) { print_msg("vkGetPhysicalDeviceFeatures not loaded"); }
	vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties)load(vk_instance, "vkGetPhysicalDeviceFormatProperties");
	if (!vkGetPhysicalDeviceFormatProperties) { print_msg("vkGetPhysicalDeviceFormatProperties not loaded"); }
	vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties)load(vk_instance, "vkGetPhysicalDeviceImageFormatProperties");
	if (!vkGetPhysicalDeviceImageFormatProperties) { print_msg("vkGetPhysicalDeviceImageFormatProperties not loaded"); }
	vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties)load(vk_instance, "vkGetPhysicalDeviceProperties");
	if (!vkGetPhysicalDeviceProperties) { print_msg("vkGetPhysicalDeviceProperties not loaded"); }
	vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties)load(vk_instance, "vkGetPhysicalDeviceQueueFamilyProperties");
	if (!vkGetPhysicalDeviceQueueFamilyProperties) { print_msg("vkGetPhysicalDeviceQueueFamilyProperties not loaded"); }
	vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties)load(vk_instance, "vkGetPhysicalDeviceMemoryProperties");
	if (!vkGetPhysicalDeviceMemoryProperties) { print_msg("vkGetPhysicalDeviceMemoryProperties not loaded"); }
	//vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)load(vk_instance, "vkGetInstanceProcAddr");
	//if (!vkGetInstanceProcAddr) { print_msg("vkGetInstanceProcAddr not loaded"); }
	vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)load(vk_instance, "vkGetDeviceProcAddr");
	if (!vkGetDeviceProcAddr) { print_msg("vkGetDeviceProcAddr not loaded"); }
	vkCreateDevice = (PFN_vkCreateDevice)load(vk_instance, "vkCreateDevice");
	if (!vkCreateDevice) { print_msg("vkCreateDevice not loaded"); }
	vkDestroyDevice = (PFN_vkDestroyDevice)load(vk_instance, "vkDestroyDevice");
	if (!vkDestroyDevice) { print_msg("vkDestroyDevice not loaded"); }
	//vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties)load(vk_instance, "vkEnumerateInstanceExtensionProperties");
	//if (!vkEnumerateInstanceExtensionProperties) { print_msg("vkEnumerateInstanceExtensionProperties not loaded"); }
	vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties)load(vk_instance, "vkEnumerateDeviceExtensionProperties");
	if (!vkEnumerateDeviceExtensionProperties) { print_msg("vkEnumerateDeviceExtensionProperties not loaded"); }
	//vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties)load(vk_instance, "vkEnumerateInstanceLayerProperties");
	//if (!vkEnumerateInstanceLayerProperties) { print_msg("vkEnumerateInstanceLayerProperties not loaded"); }
	vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties)load(vk_instance, "vkEnumerateDeviceLayerProperties");
	if (!vkEnumerateDeviceLayerProperties) { print_msg("vkEnumerateDeviceLayerProperties not loaded"); }
	vkGetDeviceQueue = (PFN_vkGetDeviceQueue)load(vk_instance, "vkGetDeviceQueue");
	if (!vkGetDeviceQueue) { print_msg("vkGetDeviceQueue not loaded"); }
	vkQueueSubmit = (PFN_vkQueueSubmit)load(vk_instance, "vkQueueSubmit");
	if (!vkQueueSubmit) { print_msg("vkQueueSubmit not loaded"); }
	vkQueueWaitIdle = (PFN_vkQueueWaitIdle)load(vk_instance, "vkQueueWaitIdle");
	if (!vkQueueWaitIdle) { print_msg("vkQueueWaitIdle not loaded"); }
	vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle)load(vk_instance, "vkDeviceWaitIdle");
	if (!vkDeviceWaitIdle) { print_msg("vkDeviceWaitIdle not loaded"); }
	vkAllocateMemory = (PFN_vkAllocateMemory)load(vk_instance, "vkAllocateMemory");
	if (!vkAllocateMemory) { print_msg("vkAllocateMemory not loaded"); }
	vkFreeMemory = (PFN_vkFreeMemory)load(vk_instance, "vkFreeMemory");
	if (!vkFreeMemory) { print_msg("vkFreeMemory not loaded"); }
	vkMapMemory = (PFN_vkMapMemory)load(vk_instance, "vkMapMemory");
	if (!vkMapMemory) { print_msg("vkMapMemory not loaded"); }
	vkUnmapMemory = (PFN_vkUnmapMemory)load(vk_instance, "vkUnmapMemory");
	if (!vkUnmapMemory) { print_msg("vkUnmapMemory not loaded"); }
	vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)load(vk_instance, "vkFlushMappedMemoryRanges");
	if (!vkFlushMappedMemoryRanges) { print_msg("vkFlushMappedMemoryRanges not loaded"); }
	vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)load(vk_instance, "vkInvalidateMappedMemoryRanges");
	if (!vkInvalidateMappedMemoryRanges) { print_msg("vkInvalidateMappedMemoryRanges not loaded"); }
	vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment)load(vk_instance, "vkGetDeviceMemoryCommitment");
	if (!vkGetDeviceMemoryCommitment) { print_msg("vkGetDeviceMemoryCommitment not loaded"); }
	vkBindBufferMemory = (PFN_vkBindBufferMemory)load(vk_instance, "vkBindBufferMemory");
	if (!vkBindBufferMemory) { print_msg("vkBindBufferMemory not loaded"); }
	vkBindImageMemory = (PFN_vkBindImageMemory)load(vk_instance, "vkBindImageMemory");
	if (!vkBindImageMemory) { print_msg("vkBindImageMemory not loaded"); }
	vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)load(vk_instance, "vkGetBufferMemoryRequirements");
	if (!vkGetBufferMemoryRequirements) { print_msg("vkGetBufferMemoryRequirements not loaded"); }
	vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)load(vk_instance, "vkGetImageMemoryRequirements");
	if (!vkGetImageMemoryRequirements) { print_msg("vkGetImageMemoryRequirements not loaded"); }
	vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements)load(vk_instance, "vkGetImageSparseMemoryRequirements");
	if (!vkGetImageSparseMemoryRequirements) { print_msg("vkGetImageSparseMemoryRequirements not loaded"); }
	vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties)load(vk_instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
	if (!vkGetPhysicalDeviceSparseImageFormatProperties) { print_msg("vkGetPhysicalDeviceSparseImageFormatProperties not loaded"); }
	vkQueueBindSparse = (PFN_vkQueueBindSparse)load(vk_instance, "vkQueueBindSparse");
	if (!vkQueueBindSparse) { print_msg("vkQueueBindSparse not loaded"); }
	vkCreateFence = (PFN_vkCreateFence)load(vk_instance, "vkCreateFence");
	if (!vkCreateFence) { print_msg("vkCreateFence not loaded"); }
	vkDestroyFence = (PFN_vkDestroyFence)load(vk_instance, "vkDestroyFence");
	if (!vkDestroyFence) { print_msg("vkDestroyFence not loaded"); }
	vkResetFences = (PFN_vkResetFences)load(vk_instance, "vkResetFences");
	if (!vkResetFences) { print_msg("vkResetFences not loaded"); }
	vkGetFenceStatus = (PFN_vkGetFenceStatus)load(vk_instance, "vkGetFenceStatus");
	if (!vkGetFenceStatus) { print_msg("vkGetFenceStatus not loaded"); }
	vkWaitForFences = (PFN_vkWaitForFences)load(vk_instance, "vkWaitForFences");
	if (!vkWaitForFences) { print_msg("vkWaitForFences not loaded"); }
	vkCreateSemaphore = (PFN_vkCreateSemaphore)load(vk_instance, "vkCreateSemaphore");
	if (!vkCreateSemaphore) { print_msg("vkCreateSemaphore not loaded"); }
	vkDestroySemaphore = (PFN_vkDestroySemaphore)load(vk_instance, "vkDestroySemaphore");
	if (!vkDestroySemaphore) { print_msg("vkDestroySemaphore not loaded"); }
	vkCreateEvent = (PFN_vkCreateEvent)load(vk_instance, "vkCreateEvent");
	if (!vkCreateEvent) { print_msg("vkCreateEvent not loaded"); }
	vkDestroyEvent = (PFN_vkDestroyEvent)load(vk_instance, "vkDestroyEvent");
	if (!vkDestroyEvent) { print_msg("vkDestroyEvent not loaded"); }
	vkGetEventStatus = (PFN_vkGetEventStatus)load(vk_instance, "vkGetEventStatus");
	if (!vkGetEventStatus) { print_msg("vkGetEventStatus not loaded"); }
	vkSetEvent = (PFN_vkSetEvent)load(vk_instance, "vkSetEvent");
	if (!vkSetEvent) { print_msg("vkSetEvent not loaded"); }
	vkResetEvent = (PFN_vkResetEvent)load(vk_instance, "vkResetEvent");
	if (!vkResetEvent) { print_msg("vkResetEvent not loaded"); }
	vkCreateQueryPool = (PFN_vkCreateQueryPool)load(vk_instance, "vkCreateQueryPool");
	if (!vkCreateQueryPool) { print_msg("vkCreateQueryPool not loaded"); }
	vkDestroyQueryPool = (PFN_vkDestroyQueryPool)load(vk_instance, "vkDestroyQueryPool");
	if (!vkDestroyQueryPool) { print_msg("vkDestroyQueryPool not loaded"); }
	vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults)load(vk_instance, "vkGetQueryPoolResults");
	if (!vkGetQueryPoolResults) { print_msg("vkGetQueryPoolResults not loaded"); }
	vkCreateBuffer = (PFN_vkCreateBuffer)load(vk_instance, "vkCreateBuffer");
	if (!vkCreateBuffer) { print_msg("vkCreateBuffer not loaded"); }
	vkDestroyBuffer = (PFN_vkDestroyBuffer)load(vk_instance, "vkDestroyBuffer");
	if (!vkDestroyBuffer) { print_msg("vkDestroyBuffer not loaded"); }
	vkCreateBufferView = (PFN_vkCreateBufferView)load(vk_instance, "vkCreateBufferView");
	if (!vkCreateBufferView) { print_msg("vkCreateBufferView not loaded"); }
	vkDestroyBufferView = (PFN_vkDestroyBufferView)load(vk_instance, "vkDestroyBufferView");
	if (!vkDestroyBufferView) { print_msg("vkDestroyBufferView not loaded"); }
	vkCreateImage = (PFN_vkCreateImage)load(vk_instance, "vkCreateImage");
	if (!vkCreateImage) { print_msg("vkCreateImage not loaded"); }
	vkDestroyImage = (PFN_vkDestroyImage)load(vk_instance, "vkDestroyImage");
	if (!vkDestroyImage) { print_msg("vkDestroyImage not loaded"); }
	vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout)load(vk_instance, "vkGetImageSubresourceLayout");
	if (!vkGetImageSubresourceLayout) { print_msg("vkGetImageSubresourceLayout not loaded"); }
	vkCreateImageView = (PFN_vkCreateImageView)load(vk_instance, "vkCreateImageView");
	if (!vkCreateImageView) { print_msg("vkCreateImageView not loaded"); }
	vkDestroyImageView = (PFN_vkDestroyImageView)load(vk_instance, "vkDestroyImageView");
	if (!vkDestroyImageView) { print_msg("vkDestroyImageView not loaded"); }
	vkCreateShaderModule = (PFN_vkCreateShaderModule)load(vk_instance, "vkCreateShaderModule");
	if (!vkCreateShaderModule) { print_msg("vkCreateShaderModule not loaded"); }
	vkDestroyShaderModule = (PFN_vkDestroyShaderModule)load(vk_instance, "vkDestroyShaderModule");
	if (!vkDestroyShaderModule) { print_msg("vkDestroyShaderModule not loaded"); }
	vkCreatePipelineCache = (PFN_vkCreatePipelineCache)load(vk_instance, "vkCreatePipelineCache");
	if (!vkCreatePipelineCache) { print_msg("vkCreatePipelineCache not loaded"); }
	vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache)load(vk_instance, "vkDestroyPipelineCache");
	if (!vkDestroyPipelineCache) { print_msg("vkDestroyPipelineCache not loaded"); }
	vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData)load(vk_instance, "vkGetPipelineCacheData");
	if (!vkGetPipelineCacheData) { print_msg("vkGetPipelineCacheData not loaded"); }
	vkMergePipelineCaches = (PFN_vkMergePipelineCaches)load(vk_instance, "vkMergePipelineCaches");
	if (!vkMergePipelineCaches) { print_msg("vkMergePipelineCaches not loaded"); }
	vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines)load(vk_instance, "vkCreateGraphicsPipelines");
	if (!vkCreateGraphicsPipelines) { print_msg("vkCreateGraphicsPipelines not loaded"); }
	vkCreateComputePipelines = (PFN_vkCreateComputePipelines)load(vk_instance, "vkCreateComputePipelines");
	if (!vkCreateComputePipelines) { print_msg("vkCreateComputePipelines not loaded"); }
	vkDestroyPipeline = (PFN_vkDestroyPipeline)load(vk_instance, "vkDestroyPipeline");
	if (!vkDestroyPipeline) { print_msg("vkDestroyPipeline not loaded"); }
	vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout)load(vk_instance, "vkCreatePipelineLayout");
	if (!vkCreatePipelineLayout) { print_msg("vkCreatePipelineLayout not loaded"); }
	vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout)load(vk_instance, "vkDestroyPipelineLayout");
	if (!vkDestroyPipelineLayout) { print_msg("vkDestroyPipelineLayout not loaded"); }
	vkCreateSampler = (PFN_vkCreateSampler)load(vk_instance, "vkCreateSampler");
	if (!vkCreateSampler) { print_msg("vkCreateSampler not loaded"); }
	vkDestroySampler = (PFN_vkDestroySampler)load(vk_instance, "vkDestroySampler");
	if (!vkDestroySampler) { print_msg("vkDestroySampler not loaded"); }
	vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout)load(vk_instance, "vkCreateDescriptorSetLayout");
	if (!vkCreateDescriptorSetLayout) { print_msg("vkCreateDescriptorSetLayout not loaded"); }
	vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout)load(vk_instance, "vkDestroyDescriptorSetLayout");
	if (!vkDestroyDescriptorSetLayout) { print_msg("vkDestroyDescriptorSetLayout not loaded"); }
	vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool)load(vk_instance, "vkCreateDescriptorPool");
	if (!vkCreateDescriptorPool) { print_msg("vkCreateDescriptorPool not loaded"); }
	vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool)load(vk_instance, "vkDestroyDescriptorPool");
	if (!vkDestroyDescriptorPool) { print_msg("vkDestroyDescriptorPool not loaded"); }
	vkResetDescriptorPool = (PFN_vkResetDescriptorPool)load(vk_instance, "vkResetDescriptorPool");
	if (!vkResetDescriptorPool) { print_msg("vkResetDescriptorPool not loaded"); }
	vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets)load(vk_instance, "vkAllocateDescriptorSets");
	if (!vkAllocateDescriptorSets) { print_msg("vkAllocateDescriptorSets not loaded"); }
	vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets)load(vk_instance, "vkFreeDescriptorSets");
	if (!vkFreeDescriptorSets) { print_msg("vkFreeDescriptorSets not loaded"); }
	vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets)load(vk_instance, "vkUpdateDescriptorSets");
	if (!vkUpdateDescriptorSets) { print_msg("vkUpdateDescriptorSets not loaded"); }
	vkCreateFramebuffer = (PFN_vkCreateFramebuffer)load(vk_instance, "vkCreateFramebuffer");
	if (!vkCreateFramebuffer) { print_msg("vkCreateFramebuffer not loaded"); }
	vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer)load(vk_instance, "vkDestroyFramebuffer");
	if (!vkDestroyFramebuffer) { print_msg("vkDestroyFramebuffer not loaded"); }
	vkCreateRenderPass = (PFN_vkCreateRenderPass)load(vk_instance, "vkCreateRenderPass");
	if (!vkCreateRenderPass) { print_msg("vkCreateRenderPass not loaded"); }
	vkDestroyRenderPass = (PFN_vkDestroyRenderPass)load(vk_instance, "vkDestroyRenderPass");
	if (!vkDestroyRenderPass) { print_msg("vkDestroyRenderPass not loaded"); }
	vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity)load(vk_instance, "vkGetRenderAreaGranularity");
	if (!vkGetRenderAreaGranularity) { print_msg("vkGetRenderAreaGranularity not loaded"); }
	vkCreateCommandPool = (PFN_vkCreateCommandPool)load(vk_instance, "vkCreateCommandPool");
	if (!vkCreateCommandPool) { print_msg("vkCreateCommandPool not loaded"); }
	vkDestroyCommandPool = (PFN_vkDestroyCommandPool)load(vk_instance, "vkDestroyCommandPool");
	if (!vkDestroyCommandPool) { print_msg("vkDestroyCommandPool not loaded"); }
	vkResetCommandPool = (PFN_vkResetCommandPool)load(vk_instance, "vkResetCommandPool");
	if (!vkResetCommandPool) { print_msg("vkResetCommandPool not loaded"); }
	vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers)load(vk_instance, "vkAllocateCommandBuffers");
	if (!vkAllocateCommandBuffers) { print_msg("vkAllocateCommandBuffers not loaded"); }
	vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers)load(vk_instance, "vkFreeCommandBuffers");
	if (!vkFreeCommandBuffers) { print_msg("vkFreeCommandBuffers not loaded"); }
	vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer)load(vk_instance, "vkBeginCommandBuffer");
	if (!vkBeginCommandBuffer) { print_msg("vkBeginCommandBuffer not loaded"); }
	vkEndCommandBuffer = (PFN_vkEndCommandBuffer)load(vk_instance, "vkEndCommandBuffer");
	if (!vkEndCommandBuffer) { print_msg("vkEndCommandBuffer not loaded"); }
	vkResetCommandBuffer = (PFN_vkResetCommandBuffer)load(vk_instance, "vkResetCommandBuffer");
	if (!vkResetCommandBuffer) { print_msg("vkResetCommandBuffer not loaded"); }
	vkCmdBindPipeline = (PFN_vkCmdBindPipeline)load(vk_instance, "vkCmdBindPipeline");
	if (!vkCmdBindPipeline) { print_msg("vkCmdBindPipeline not loaded"); }
	vkCmdSetViewport = (PFN_vkCmdSetViewport)load(vk_instance, "vkCmdSetViewport");
	if (!vkCmdSetViewport) { print_msg("vkCmdSetViewport not loaded"); }
	vkCmdSetScissor = (PFN_vkCmdSetScissor)load(vk_instance, "vkCmdSetScissor");
	if (!vkCmdSetScissor) { print_msg("vkCmdSetScissor not loaded"); }
	vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth)load(vk_instance, "vkCmdSetLineWidth");
	if (!vkCmdSetLineWidth) { print_msg("vkCmdSetLineWidth not loaded"); }
	vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias)load(vk_instance, "vkCmdSetDepthBias");
	if (!vkCmdSetDepthBias) { print_msg("vkCmdSetDepthBias not loaded"); }
	vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants)load(vk_instance, "vkCmdSetBlendConstants");
	if (!vkCmdSetBlendConstants) { print_msg("vkCmdSetBlendConstants not loaded"); }
	vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds)load(vk_instance, "vkCmdSetDepthBounds");
	if (!vkCmdSetDepthBounds) { print_msg("vkCmdSetDepthBounds not loaded"); }
	vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask)load(vk_instance, "vkCmdSetStencilCompareMask");
	if (!vkCmdSetStencilCompareMask) { print_msg("vkCmdSetStencilCompareMask not loaded"); }
	vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask)load(vk_instance, "vkCmdSetStencilWriteMask");
	if (!vkCmdSetStencilWriteMask) { print_msg("vkCmdSetStencilWriteMask not loaded"); }
	vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference)load(vk_instance, "vkCmdSetStencilReference");
	if (!vkCmdSetStencilReference) { print_msg("vkCmdSetStencilReference not loaded"); }
	vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets)load(vk_instance, "vkCmdBindDescriptorSets");
	if (!vkCmdBindDescriptorSets) { print_msg("vkCmdBindDescriptorSets not loaded"); }
	vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer)load(vk_instance, "vkCmdBindIndexBuffer");
	if (!vkCmdBindIndexBuffer) { print_msg("vkCmdBindIndexBuffer not loaded"); }
	vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers)load(vk_instance, "vkCmdBindVertexBuffers");
	if (!vkCmdBindVertexBuffers) { print_msg("vkCmdBindVertexBuffers not loaded"); }
	vkCmdDraw = (PFN_vkCmdDraw)load(vk_instance, "vkCmdDraw");
	if (!vkCmdDraw) { print_msg("vkCmdDraw not loaded"); }
	vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed)load(vk_instance, "vkCmdDrawIndexed");
	if (!vkCmdDrawIndexed) { print_msg("vkCmdDrawIndexed not loaded"); }
	vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect)load(vk_instance, "vkCmdDrawIndirect");
	if (!vkCmdDrawIndirect) { print_msg("vkCmdDrawIndirect not loaded"); }
	vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect)load(vk_instance, "vkCmdDrawIndexedIndirect");
	if (!vkCmdDrawIndexedIndirect) { print_msg("vkCmdDrawIndexedIndirect not loaded"); }
	vkCmdDispatch = (PFN_vkCmdDispatch)load(vk_instance, "vkCmdDispatch");
	if (!vkCmdDispatch) { print_msg("vkCmdDispatch not loaded"); }
	vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect)load(vk_instance, "vkCmdDispatchIndirect");
	if (!vkCmdDispatchIndirect) { print_msg("vkCmdDispatchIndirect not loaded"); }
	vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer)load(vk_instance, "vkCmdCopyBuffer");
	if (!vkCmdCopyBuffer) { print_msg("vkCmdCopyBuffer not loaded"); }
	vkCmdCopyImage = (PFN_vkCmdCopyImage)load(vk_instance, "vkCmdCopyImage");
	if (!vkCmdCopyImage) { print_msg("vkCmdCopyImage not loaded"); }
	vkCmdBlitImage = (PFN_vkCmdBlitImage)load(vk_instance, "vkCmdBlitImage");
	if (!vkCmdBlitImage) { print_msg("vkCmdBlitImage not loaded"); }
	vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage)load(vk_instance, "vkCmdCopyBufferToImage");
	if (!vkCmdCopyBufferToImage) { print_msg("vkCmdCopyBufferToImage not loaded"); }
	vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer)load(vk_instance, "vkCmdCopyImageToBuffer");
	if (!vkCmdCopyImageToBuffer) { print_msg("vkCmdCopyImageToBuffer not loaded"); }
	vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer)load(vk_instance, "vkCmdUpdateBuffer");
	if (!vkCmdUpdateBuffer) { print_msg("vkCmdUpdateBuffer not loaded"); }
	vkCmdFillBuffer = (PFN_vkCmdFillBuffer)load(vk_instance, "vkCmdFillBuffer");
	if (!vkCmdFillBuffer) { print_msg("vkCmdFillBuffer not loaded"); }
	vkCmdClearColorImage = (PFN_vkCmdClearColorImage)load(vk_instance, "vkCmdClearColorImage");
	if (!vkCmdClearColorImage) { print_msg("vkCmdClearColorImage not loaded"); }
	vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage)load(vk_instance, "vkCmdClearDepthStencilImage");
	if (!vkCmdClearDepthStencilImage) { print_msg("vkCmdClearDepthStencilImage not loaded"); }
	vkCmdClearAttachments = (PFN_vkCmdClearAttachments)load(vk_instance, "vkCmdClearAttachments");
	if (!vkCmdClearAttachments) { print_msg("vkCmdClearAttachments not loaded"); }
	vkCmdResolveImage = (PFN_vkCmdResolveImage)load(vk_instance, "vkCmdResolveImage");
	if (!vkCmdResolveImage) { print_msg("vkCmdResolveImage not loaded"); }
	vkCmdSetEvent = (PFN_vkCmdSetEvent)load(vk_instance, "vkCmdSetEvent");
	if (!vkCmdSetEvent) { print_msg("vkCmdSetEvent not loaded"); }
	vkCmdResetEvent = (PFN_vkCmdResetEvent)load(vk_instance, "vkCmdResetEvent");
	if (!vkCmdResetEvent) { print_msg("vkCmdResetEvent not loaded"); }
	vkCmdWaitEvents = (PFN_vkCmdWaitEvents)load(vk_instance, "vkCmdWaitEvents");
	if (!vkCmdWaitEvents) { print_msg("vkCmdWaitEvents not loaded"); }
	vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier)load(vk_instance, "vkCmdPipelineBarrier");
	if (!vkCmdPipelineBarrier) { print_msg("vkCmdPipelineBarrier not loaded"); }
	vkCmdBeginQuery = (PFN_vkCmdBeginQuery)load(vk_instance, "vkCmdBeginQuery");
	if (!vkCmdBeginQuery) { print_msg("vkCmdBeginQuery not loaded"); }
	vkCmdEndQuery = (PFN_vkCmdEndQuery)load(vk_instance, "vkCmdEndQuery");
	if (!vkCmdEndQuery) { print_msg("vkCmdEndQuery not loaded"); }
	vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool)load(vk_instance, "vkCmdResetQueryPool");
	if (!vkCmdResetQueryPool) { print_msg("vkCmdResetQueryPool not loaded"); }
	vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp)load(vk_instance, "vkCmdWriteTimestamp");
	if (!vkCmdWriteTimestamp) { print_msg("vkCmdWriteTimestamp not loaded"); }
	vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults)load(vk_instance, "vkCmdCopyQueryPoolResults");
	if (!vkCmdCopyQueryPoolResults) { print_msg("vkCmdCopyQueryPoolResults not loaded"); }
	vkCmdPushConstants = (PFN_vkCmdPushConstants)load(vk_instance, "vkCmdPushConstants");
	if (!vkCmdPushConstants) { print_msg("vkCmdPushConstants not loaded"); }
	vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass)load(vk_instance, "vkCmdBeginRenderPass");
	if (!vkCmdBeginRenderPass) { print_msg("vkCmdBeginRenderPass not loaded"); }
	vkCmdNextSubpass = (PFN_vkCmdNextSubpass)load(vk_instance, "vkCmdNextSubpass");
	if (!vkCmdNextSubpass) { print_msg("vkCmdNextSubpass not loaded"); }
	vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass)load(vk_instance, "vkCmdEndRenderPass");
	if (!vkCmdEndRenderPass) { print_msg("vkCmdEndRenderPass not loaded"); }
	vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands)load(vk_instance, "vkCmdExecuteCommands");
	if (!vkCmdExecuteCommands) { print_msg("vkCmdExecuteCommands not loaded"); }
}


void vkfnlib_init_VK_VERSION_1_1(PFN_loadfunc_vk load, VkInstance vk_instance) {
	//vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion)load(vk_instance, "vkEnumerateInstanceVersion");
	//if (!vkEnumerateInstanceVersion) { print_msg("vkEnumerateInstanceVersion not loaded"); }
	vkBindBufferMemory2 = (PFN_vkBindBufferMemory2)load(vk_instance, "vkBindBufferMemory2");
	if (!vkBindBufferMemory2) { print_msg("vkBindBufferMemory2 not loaded"); }
	vkBindImageMemory2 = (PFN_vkBindImageMemory2)load(vk_instance, "vkBindImageMemory2");
	if (!vkBindImageMemory2) { print_msg("vkBindImageMemory2 not loaded"); }
	vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)load(vk_instance, "vkGetDeviceGroupPeerMemoryFeatures");
	if (!vkGetDeviceGroupPeerMemoryFeatures) { print_msg("vkGetDeviceGroupPeerMemoryFeatures not loaded"); }
	vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask)load(vk_instance, "vkCmdSetDeviceMask");
	if (!vkCmdSetDeviceMask) { print_msg("vkCmdSetDeviceMask not loaded"); }
	vkCmdDispatchBase = (PFN_vkCmdDispatchBase)load(vk_instance, "vkCmdDispatchBase");
	if (!vkCmdDispatchBase) { print_msg("vkCmdDispatchBase not loaded"); }
	vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups)load(vk_instance, "vkEnumeratePhysicalDeviceGroups");
	if (!vkEnumeratePhysicalDeviceGroups) { print_msg("vkEnumeratePhysicalDeviceGroups not loaded"); }
	vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)load(vk_instance, "vkGetImageMemoryRequirements2");
	if (!vkGetImageMemoryRequirements2) { print_msg("vkGetImageMemoryRequirements2 not loaded"); }
	vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)load(vk_instance, "vkGetBufferMemoryRequirements2");
	if (!vkGetBufferMemoryRequirements2) { print_msg("vkGetBufferMemoryRequirements2 not loaded"); }
	vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)load(vk_instance, "vkGetImageSparseMemoryRequirements2");
	if (!vkGetImageSparseMemoryRequirements2) { print_msg("vkGetImageSparseMemoryRequirements2 not loaded"); }
	vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2)load(vk_instance, "vkGetPhysicalDeviceFeatures2");
	if (!vkGetPhysicalDeviceFeatures2) { print_msg("vkGetPhysicalDeviceFeatures2 not loaded"); }
	vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2)load(vk_instance, "vkGetPhysicalDeviceProperties2");
	if (!vkGetPhysicalDeviceProperties2) { print_msg("vkGetPhysicalDeviceProperties2 not loaded"); }
	vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2)load(vk_instance, "vkGetPhysicalDeviceFormatProperties2");
	if (!vkGetPhysicalDeviceFormatProperties2) { print_msg("vkGetPhysicalDeviceFormatProperties2 not loaded"); }
	vkGetPhysicalDeviceImageFormatProperties2 = (PFN_vkGetPhysicalDeviceImageFormatProperties2)load(vk_instance, "vkGetPhysicalDeviceImageFormatProperties2");
	if (!vkGetPhysicalDeviceImageFormatProperties2) { print_msg("vkGetPhysicalDeviceImageFormatProperties2 not loaded"); }
	vkGetPhysicalDeviceQueueFamilyProperties2 = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2)load(vk_instance, "vkGetPhysicalDeviceQueueFamilyProperties2");
	if (!vkGetPhysicalDeviceQueueFamilyProperties2) { print_msg("vkGetPhysicalDeviceQueueFamilyProperties2 not loaded"); }
	vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2)load(vk_instance, "vkGetPhysicalDeviceMemoryProperties2");
	if (!vkGetPhysicalDeviceMemoryProperties2) { print_msg("vkGetPhysicalDeviceMemoryProperties2 not loaded"); }
	vkGetPhysicalDeviceSparseImageFormatProperties2 = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)load(vk_instance, "vkGetPhysicalDeviceSparseImageFormatProperties2");
	if (!vkGetPhysicalDeviceSparseImageFormatProperties2) { print_msg("vkGetPhysicalDeviceSparseImageFormatProperties2 not loaded"); }
	vkTrimCommandPool = (PFN_vkTrimCommandPool)load(vk_instance, "vkTrimCommandPool");
	if (!vkTrimCommandPool) { print_msg("vkTrimCommandPool not loaded"); }
	vkGetDeviceQueue2 = (PFN_vkGetDeviceQueue2)load(vk_instance, "vkGetDeviceQueue2");
	if (!vkGetDeviceQueue2) { print_msg("vkGetDeviceQueue2 not loaded"); }
	vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)load(vk_instance, "vkCreateSamplerYcbcrConversion");
	if (!vkCreateSamplerYcbcrConversion) { print_msg("vkCreateSamplerYcbcrConversion not loaded"); }
	vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)load(vk_instance, "vkDestroySamplerYcbcrConversion");
	if (!vkDestroySamplerYcbcrConversion) { print_msg("vkDestroySamplerYcbcrConversion not loaded"); }
	vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)load(vk_instance, "vkCreateDescriptorUpdateTemplate");
	if (!vkCreateDescriptorUpdateTemplate) { print_msg("vkCreateDescriptorUpdateTemplate not loaded"); }
	vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)load(vk_instance, "vkDestroyDescriptorUpdateTemplate");
	if (!vkDestroyDescriptorUpdateTemplate) { print_msg("vkDestroyDescriptorUpdateTemplate not loaded"); }
	vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)load(vk_instance, "vkUpdateDescriptorSetWithTemplate");
	if (!vkUpdateDescriptorSetWithTemplate) { print_msg("vkUpdateDescriptorSetWithTemplate not loaded"); }
	vkGetPhysicalDeviceExternalBufferProperties = (PFN_vkGetPhysicalDeviceExternalBufferProperties)load(vk_instance, "vkGetPhysicalDeviceExternalBufferProperties");
	if (!vkGetPhysicalDeviceExternalBufferProperties) { print_msg("vkGetPhysicalDeviceExternalBufferProperties not loaded"); }
	vkGetPhysicalDeviceExternalFenceProperties = (PFN_vkGetPhysicalDeviceExternalFenceProperties)load(vk_instance, "vkGetPhysicalDeviceExternalFenceProperties");
	if (!vkGetPhysicalDeviceExternalFenceProperties) { print_msg("vkGetPhysicalDeviceExternalFenceProperties not loaded"); }
	vkGetPhysicalDeviceExternalSemaphoreProperties = (PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)load(vk_instance, "vkGetPhysicalDeviceExternalSemaphoreProperties");
	if (!vkGetPhysicalDeviceExternalSemaphoreProperties) { print_msg("vkGetPhysicalDeviceExternalSemaphoreProperties not loaded"); }
	vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)load(vk_instance, "vkGetDescriptorSetLayoutSupport");
	if (!vkGetDescriptorSetLayoutSupport) { print_msg("vkGetDescriptorSetLayoutSupport not loaded"); }
}


void vkfnlib_init_VK_VERSION_1_2(PFN_loadfunc_vk load, VkInstance vk_instance) {
	vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)load(vk_instance, "vkCmdDrawIndirectCount");
	if (!vkCmdDrawIndirectCount) { print_msg("vkCmdDrawIndirectCount not loaded"); }
	vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)load(vk_instance, "vkCmdDrawIndexedIndirectCount");
	if (!vkCmdDrawIndexedIndirectCount) { print_msg("vkCmdDrawIndexedIndirectCount not loaded"); }
	vkCreateRenderPass2 = (PFN_vkCreateRenderPass2)load(vk_instance, "vkCreateRenderPass2");
	if (!vkCreateRenderPass2) { print_msg("vkCreateRenderPass2 not loaded"); }
	vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2)load(vk_instance, "vkCmdBeginRenderPass2");
	if (!vkCmdBeginRenderPass2) { print_msg("vkCmdBeginRenderPass2 not loaded"); }
	vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2)load(vk_instance, "vkCmdNextSubpass2");
	if (!vkCmdNextSubpass2) { print_msg("vkCmdNextSubpass2 not loaded"); }
	vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2)load(vk_instance, "vkCmdEndRenderPass2");
	if (!vkCmdEndRenderPass2) { print_msg("vkCmdEndRenderPass2 not loaded"); }
	vkResetQueryPool = (PFN_vkResetQueryPool)load(vk_instance, "vkResetQueryPool");
	if (!vkResetQueryPool) { print_msg("vkResetQueryPool not loaded"); }
	vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)load(vk_instance, "vkGetSemaphoreCounterValue");
	if (!vkGetSemaphoreCounterValue) { print_msg("vkGetSemaphoreCounterValue not loaded"); }
	vkWaitSemaphores = (PFN_vkWaitSemaphores)load(vk_instance, "vkWaitSemaphores");
	if (!vkWaitSemaphores) { print_msg("vkWaitSemaphores not loaded"); }
	vkSignalSemaphore = (PFN_vkSignalSemaphore)load(vk_instance, "vkSignalSemaphore");
	if (!vkSignalSemaphore) { print_msg("vkSignalSemaphore not loaded"); }
	vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)load(vk_instance, "vkGetBufferDeviceAddress");
	if (!vkGetBufferDeviceAddress) { print_msg("vkGetBufferDeviceAddress not loaded"); }
	vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)load(vk_instance, "vkGetBufferOpaqueCaptureAddress");
	if (!vkGetBufferOpaqueCaptureAddress) { print_msg("vkGetBufferOpaqueCaptureAddress not loaded"); }
	vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)load(vk_instance, "vkGetDeviceMemoryOpaqueCaptureAddress");
	if (!vkGetDeviceMemoryOpaqueCaptureAddress) { print_msg("vkGetDeviceMemoryOpaqueCaptureAddress not loaded"); }
}


void vkfnlib_init_VK_VERSION_1_3(PFN_loadfunc_vk load, VkInstance vk_instance) {
	vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties)load(vk_instance, "vkGetPhysicalDeviceToolProperties");
	if (!vkGetPhysicalDeviceToolProperties) { print_msg("vkGetPhysicalDeviceToolProperties not loaded"); }
	vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot)load(vk_instance, "vkCreatePrivateDataSlot");
	if (!vkCreatePrivateDataSlot) { print_msg("vkCreatePrivateDataSlot not loaded"); }
	vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot)load(vk_instance, "vkDestroyPrivateDataSlot");
	if (!vkDestroyPrivateDataSlot) { print_msg("vkDestroyPrivateDataSlot not loaded"); }
	vkSetPrivateData = (PFN_vkSetPrivateData)load(vk_instance, "vkSetPrivateData");
	if (!vkSetPrivateData) { print_msg("vkSetPrivateData not loaded"); }
	vkGetPrivateData = (PFN_vkGetPrivateData)load(vk_instance, "vkGetPrivateData");
	if (!vkGetPrivateData) { print_msg("vkGetPrivateData not loaded"); }
	vkCmdSetEvent2 = (PFN_vkCmdSetEvent2)load(vk_instance, "vkCmdSetEvent2");
	if (!vkCmdSetEvent2) { print_msg("vkCmdSetEvent2 not loaded"); }
	vkCmdResetEvent2 = (PFN_vkCmdResetEvent2)load(vk_instance, "vkCmdResetEvent2");
	if (!vkCmdResetEvent2) { print_msg("vkCmdResetEvent2 not loaded"); }
	vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2)load(vk_instance, "vkCmdWaitEvents2");
	if (!vkCmdWaitEvents2) { print_msg("vkCmdWaitEvents2 not loaded"); }
	vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2)load(vk_instance, "vkCmdPipelineBarrier2");
	if (!vkCmdPipelineBarrier2) { print_msg("vkCmdPipelineBarrier2 not loaded"); }
	vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2)load(vk_instance, "vkCmdWriteTimestamp2");
	if (!vkCmdWriteTimestamp2) { print_msg("vkCmdWriteTimestamp2 not loaded"); }
	vkQueueSubmit2 = (PFN_vkQueueSubmit2)load(vk_instance, "vkQueueSubmit2");
	if (!vkQueueSubmit2) { print_msg("vkQueueSubmit2 not loaded"); }
	vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2)load(vk_instance, "vkCmdCopyBuffer2");
	if (!vkCmdCopyBuffer2) { print_msg("vkCmdCopyBuffer2 not loaded"); }
	vkCmdCopyImage2 = (PFN_vkCmdCopyImage2)load(vk_instance, "vkCmdCopyImage2");
	if (!vkCmdCopyImage2) { print_msg("vkCmdCopyImage2 not loaded"); }
	vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2)load(vk_instance, "vkCmdCopyBufferToImage2");
	if (!vkCmdCopyBufferToImage2) { print_msg("vkCmdCopyBufferToImage2 not loaded"); }
	vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2)load(vk_instance, "vkCmdCopyImageToBuffer2");
	if (!vkCmdCopyImageToBuffer2) { print_msg("vkCmdCopyImageToBuffer2 not loaded"); }
	vkCmdBlitImage2 = (PFN_vkCmdBlitImage2)load(vk_instance, "vkCmdBlitImage2");
	if (!vkCmdBlitImage2) { print_msg("vkCmdBlitImage2 not loaded"); }
	vkCmdResolveImage2 = (PFN_vkCmdResolveImage2)load(vk_instance, "vkCmdResolveImage2");
	if (!vkCmdResolveImage2) { print_msg("vkCmdResolveImage2 not loaded"); }
	vkCmdBeginRendering = (PFN_vkCmdBeginRendering)load(vk_instance, "vkCmdBeginRendering");
	if (!vkCmdBeginRendering) { print_msg("vkCmdBeginRendering not loaded"); }
	vkCmdEndRendering = (PFN_vkCmdEndRendering)load(vk_instance, "vkCmdEndRendering");
	if (!vkCmdEndRendering) { print_msg("vkCmdEndRendering not loaded"); }
	vkCmdSetCullMode = (PFN_vkCmdSetCullMode)load(vk_instance, "vkCmdSetCullMode");
	if (!vkCmdSetCullMode) { print_msg("vkCmdSetCullMode not loaded"); }
	vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace)load(vk_instance, "vkCmdSetFrontFace");
	if (!vkCmdSetFrontFace) { print_msg("vkCmdSetFrontFace not loaded"); }
	vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology)load(vk_instance, "vkCmdSetPrimitiveTopology");
	if (!vkCmdSetPrimitiveTopology) { print_msg("vkCmdSetPrimitiveTopology not loaded"); }
	vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount)load(vk_instance, "vkCmdSetViewportWithCount");
	if (!vkCmdSetViewportWithCount) { print_msg("vkCmdSetViewportWithCount not loaded"); }
	vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount)load(vk_instance, "vkCmdSetScissorWithCount");
	if (!vkCmdSetScissorWithCount) { print_msg("vkCmdSetScissorWithCount not loaded"); }
	vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2)load(vk_instance, "vkCmdBindVertexBuffers2");
	if (!vkCmdBindVertexBuffers2) { print_msg("vkCmdBindVertexBuffers2 not loaded"); }
	vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable)load(vk_instance, "vkCmdSetDepthTestEnable");
	if (!vkCmdSetDepthTestEnable) { print_msg("vkCmdSetDepthTestEnable not loaded"); }
	vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable)load(vk_instance, "vkCmdSetDepthWriteEnable");
	if (!vkCmdSetDepthWriteEnable) { print_msg("vkCmdSetDepthWriteEnable not loaded"); }
	vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp)load(vk_instance, "vkCmdSetDepthCompareOp");
	if (!vkCmdSetDepthCompareOp) { print_msg("vkCmdSetDepthCompareOp not loaded"); }
	vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable)load(vk_instance, "vkCmdSetDepthBoundsTestEnable");
	if (!vkCmdSetDepthBoundsTestEnable) { print_msg("vkCmdSetDepthBoundsTestEnable not loaded"); }
	vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable)load(vk_instance, "vkCmdSetStencilTestEnable");
	if (!vkCmdSetStencilTestEnable) { print_msg("vkCmdSetStencilTestEnable not loaded"); }
	vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp)load(vk_instance, "vkCmdSetStencilOp");
	if (!vkCmdSetStencilOp) { print_msg("vkCmdSetStencilOp not loaded"); }
	vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable)load(vk_instance, "vkCmdSetRasterizerDiscardEnable");
	if (!vkCmdSetRasterizerDiscardEnable) { print_msg("vkCmdSetRasterizerDiscardEnable not loaded"); }
	vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable)load(vk_instance, "vkCmdSetDepthBiasEnable");
	if (!vkCmdSetDepthBiasEnable) { print_msg("vkCmdSetDepthBiasEnable not loaded"); }
	vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable)load(vk_instance, "vkCmdSetPrimitiveRestartEnable");
	if (!vkCmdSetPrimitiveRestartEnable) { print_msg("vkCmdSetPrimitiveRestartEnable not loaded"); }
	vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements)load(vk_instance, "vkGetDeviceBufferMemoryRequirements");
	if (!vkGetDeviceBufferMemoryRequirements) { print_msg("vkGetDeviceBufferMemoryRequirements not loaded"); }
	vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements)load(vk_instance, "vkGetDeviceImageMemoryRequirements");
	if (!vkGetDeviceImageMemoryRequirements) { print_msg("vkGetDeviceImageMemoryRequirements not loaded"); }
	vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements)load(vk_instance, "vkGetDeviceImageSparseMemoryRequirements");
	if (!vkGetDeviceImageSparseMemoryRequirements) { print_msg("vkGetDeviceImageSparseMemoryRequirements not loaded"); }
	vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR)load(vk_instance, "vkDestroySurfaceKHR");
	if (!vkDestroySurfaceKHR) { print_msg("vkDestroySurfaceKHR not loaded"); }
	vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR)load(vk_instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
	if (!vkGetPhysicalDeviceSurfaceSupportKHR) { print_msg("vkGetPhysicalDeviceSurfaceSupportKHR not loaded"); }
	vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)load(vk_instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
	if (!vkGetPhysicalDeviceSurfaceCapabilitiesKHR) { print_msg("vkGetPhysicalDeviceSurfaceCapabilitiesKHR not loaded"); }
	vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)load(vk_instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
	if (!vkGetPhysicalDeviceSurfaceFormatsKHR) { print_msg("vkGetPhysicalDeviceSurfaceFormatsKHR not loaded"); }
	vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)load(vk_instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
	if (!vkGetPhysicalDeviceSurfacePresentModesKHR) { print_msg("vkGetPhysicalDeviceSurfacePresentModesKHR not loaded"); }
	vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR)load(vk_instance, "vkCreateSwapchainKHR");
	if (!vkCreateSwapchainKHR) { print_msg("vkCreateSwapchainKHR not loaded"); }
	vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR)load(vk_instance, "vkDestroySwapchainKHR");
	if (!vkDestroySwapchainKHR) { print_msg("vkDestroySwapchainKHR not loaded"); }
	vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)load(vk_instance, "vkGetSwapchainImagesKHR");
	if (!vkGetSwapchainImagesKHR) { print_msg("vkGetSwapchainImagesKHR not loaded"); }
	vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR)load(vk_instance, "vkAcquireNextImageKHR");
	if (!vkAcquireNextImageKHR) { print_msg("vkAcquireNextImageKHR not loaded"); }
	vkQueuePresentKHR = (PFN_vkQueuePresentKHR)load(vk_instance, "vkQueuePresentKHR");
	if (!vkQueuePresentKHR) { print_msg("vkQueuePresentKHR not loaded"); }
	vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)load(vk_instance, "vkGetDeviceGroupPresentCapabilitiesKHR");
	if (!vkGetDeviceGroupPresentCapabilitiesKHR) { print_msg("vkGetDeviceGroupPresentCapabilitiesKHR not loaded"); }
	vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)load(vk_instance, "vkGetDeviceGroupSurfacePresentModesKHR");
	if (!vkGetDeviceGroupSurfacePresentModesKHR) { print_msg("vkGetDeviceGroupSurfacePresentModesKHR not loaded"); }
	vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR)load(vk_instance, "vkGetPhysicalDevicePresentRectanglesKHR");
	if (!vkGetPhysicalDevicePresentRectanglesKHR) { print_msg("vkGetPhysicalDevicePresentRectanglesKHR not loaded"); }
	vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)load(vk_instance, "vkAcquireNextImage2KHR");
	if (!vkAcquireNextImage2KHR) { print_msg("vkAcquireNextImage2KHR not loaded"); }
	vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
	if (!vkGetPhysicalDeviceDisplayPropertiesKHR) { print_msg("vkGetPhysicalDeviceDisplayPropertiesKHR not loaded"); }
	vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
	if (!vkGetPhysicalDeviceDisplayPlanePropertiesKHR) { print_msg("vkGetPhysicalDeviceDisplayPlanePropertiesKHR not loaded"); }
	vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR)load(vk_instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
	if (!vkGetDisplayPlaneSupportedDisplaysKHR) { print_msg("vkGetDisplayPlaneSupportedDisplaysKHR not loaded"); }
	vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR)load(vk_instance, "vkGetDisplayModePropertiesKHR");
	if (!vkGetDisplayModePropertiesKHR) { print_msg("vkGetDisplayModePropertiesKHR not loaded"); }
	vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR)load(vk_instance, "vkCreateDisplayModeKHR");
	if (!vkCreateDisplayModeKHR) { print_msg("vkCreateDisplayModeKHR not loaded"); }
	vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR)load(vk_instance, "vkGetDisplayPlaneCapabilitiesKHR");
	if (!vkGetDisplayPlaneCapabilitiesKHR) { print_msg("vkGetDisplayPlaneCapabilitiesKHR not loaded"); }
	vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR)load(vk_instance, "vkCreateDisplayPlaneSurfaceKHR");
	if (!vkCreateDisplayPlaneSurfaceKHR) { print_msg("vkCreateDisplayPlaneSurfaceKHR not loaded"); }
	vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR)load(vk_instance, "vkCreateSharedSwapchainsKHR");
	if (!vkCreateSharedSwapchainsKHR) { print_msg("vkCreateSharedSwapchainsKHR not loaded"); }
	vkGetPhysicalDeviceVideoCapabilitiesKHR = (PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)load(vk_instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR");
	if (!vkGetPhysicalDeviceVideoCapabilitiesKHR) { print_msg("vkGetPhysicalDeviceVideoCapabilitiesKHR not loaded"); }
	vkGetPhysicalDeviceVideoFormatPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR");
	if (!vkGetPhysicalDeviceVideoFormatPropertiesKHR) { print_msg("vkGetPhysicalDeviceVideoFormatPropertiesKHR not loaded"); }
	vkCreateVideoSessionKHR = (PFN_vkCreateVideoSessionKHR)load(vk_instance, "vkCreateVideoSessionKHR");
	if (!vkCreateVideoSessionKHR) { print_msg("vkCreateVideoSessionKHR not loaded"); }
	vkDestroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR)load(vk_instance, "vkDestroyVideoSessionKHR");
	if (!vkDestroyVideoSessionKHR) { print_msg("vkDestroyVideoSessionKHR not loaded"); }
	vkGetVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR)load(vk_instance, "vkGetVideoSessionMemoryRequirementsKHR");
	if (!vkGetVideoSessionMemoryRequirementsKHR) { print_msg("vkGetVideoSessionMemoryRequirementsKHR not loaded"); }
	vkBindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR)load(vk_instance, "vkBindVideoSessionMemoryKHR");
	if (!vkBindVideoSessionMemoryKHR) { print_msg("vkBindVideoSessionMemoryKHR not loaded"); }
	vkCreateVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR)load(vk_instance, "vkCreateVideoSessionParametersKHR");
	if (!vkCreateVideoSessionParametersKHR) { print_msg("vkCreateVideoSessionParametersKHR not loaded"); }
	vkUpdateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR)load(vk_instance, "vkUpdateVideoSessionParametersKHR");
	if (!vkUpdateVideoSessionParametersKHR) { print_msg("vkUpdateVideoSessionParametersKHR not loaded"); }
	vkDestroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR)load(vk_instance, "vkDestroyVideoSessionParametersKHR");
	if (!vkDestroyVideoSessionParametersKHR) { print_msg("vkDestroyVideoSessionParametersKHR not loaded"); }
	vkCmdBeginVideoCodingKHR = (PFN_vkCmdBeginVideoCodingKHR)load(vk_instance, "vkCmdBeginVideoCodingKHR");
	if (!vkCmdBeginVideoCodingKHR) { print_msg("vkCmdBeginVideoCodingKHR not loaded"); }
	vkCmdEndVideoCodingKHR = (PFN_vkCmdEndVideoCodingKHR)load(vk_instance, "vkCmdEndVideoCodingKHR");
	if (!vkCmdEndVideoCodingKHR) { print_msg("vkCmdEndVideoCodingKHR not loaded"); }
	vkCmdControlVideoCodingKHR = (PFN_vkCmdControlVideoCodingKHR)load(vk_instance, "vkCmdControlVideoCodingKHR");
	if (!vkCmdControlVideoCodingKHR) { print_msg("vkCmdControlVideoCodingKHR not loaded"); }
	vkCmdDecodeVideoKHR = (PFN_vkCmdDecodeVideoKHR)load(vk_instance, "vkCmdDecodeVideoKHR");
	if (!vkCmdDecodeVideoKHR) { print_msg("vkCmdDecodeVideoKHR not loaded"); }
	vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)load(vk_instance, "vkCmdBeginRenderingKHR");
	if (!vkCmdBeginRenderingKHR) { print_msg("vkCmdBeginRenderingKHR not loaded"); }
	vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)load(vk_instance, "vkCmdEndRenderingKHR");
	if (!vkCmdEndRenderingKHR) { print_msg("vkCmdEndRenderingKHR not loaded"); }
	vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR)load(vk_instance, "vkGetPhysicalDeviceFeatures2KHR");
	if (!vkGetPhysicalDeviceFeatures2KHR) { print_msg("vkGetPhysicalDeviceFeatures2KHR not loaded"); }
	vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceProperties2KHR");
	if (!vkGetPhysicalDeviceProperties2KHR) { print_msg("vkGetPhysicalDeviceProperties2KHR not loaded"); }
	vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceFormatProperties2KHR");
	if (!vkGetPhysicalDeviceFormatProperties2KHR) { print_msg("vkGetPhysicalDeviceFormatProperties2KHR not loaded"); }
	vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceImageFormatProperties2KHR");
	if (!vkGetPhysicalDeviceImageFormatProperties2KHR) { print_msg("vkGetPhysicalDeviceImageFormatProperties2KHR not loaded"); }
	vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
	if (!vkGetPhysicalDeviceQueueFamilyProperties2KHR) { print_msg("vkGetPhysicalDeviceQueueFamilyProperties2KHR not loaded"); }
	vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceMemoryProperties2KHR");
	if (!vkGetPhysicalDeviceMemoryProperties2KHR) { print_msg("vkGetPhysicalDeviceMemoryProperties2KHR not loaded"); }
	vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
	if (!vkGetPhysicalDeviceSparseImageFormatProperties2KHR) { print_msg("vkGetPhysicalDeviceSparseImageFormatProperties2KHR not loaded"); }
	vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)load(vk_instance, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
	if (!vkGetDeviceGroupPeerMemoryFeaturesKHR) { print_msg("vkGetDeviceGroupPeerMemoryFeaturesKHR not loaded"); }
	vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR)load(vk_instance, "vkCmdSetDeviceMaskKHR");
	if (!vkCmdSetDeviceMaskKHR) { print_msg("vkCmdSetDeviceMaskKHR not loaded"); }
	vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR)load(vk_instance, "vkCmdDispatchBaseKHR");
	if (!vkCmdDispatchBaseKHR) { print_msg("vkCmdDispatchBaseKHR not loaded"); }
	vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR)load(vk_instance, "vkTrimCommandPoolKHR");
	if (!vkTrimCommandPoolKHR) { print_msg("vkTrimCommandPoolKHR not loaded"); }
	vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR)load(vk_instance, "vkEnumeratePhysicalDeviceGroupsKHR");
	if (!vkEnumeratePhysicalDeviceGroupsKHR) { print_msg("vkEnumeratePhysicalDeviceGroupsKHR not loaded"); }
	vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
	if (!vkGetPhysicalDeviceExternalBufferPropertiesKHR) { print_msg("vkGetPhysicalDeviceExternalBufferPropertiesKHR not loaded"); }
	vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR)load(vk_instance, "vkGetMemoryFdKHR");
	if (!vkGetMemoryFdKHR) { print_msg("vkGetMemoryFdKHR not loaded"); }
	vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR)load(vk_instance, "vkGetMemoryFdPropertiesKHR");
	if (!vkGetMemoryFdPropertiesKHR) { print_msg("vkGetMemoryFdPropertiesKHR not loaded"); }
	vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
	if (!vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) { print_msg("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR not loaded"); }
	vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR)load(vk_instance, "vkImportSemaphoreFdKHR");
	if (!vkImportSemaphoreFdKHR) { print_msg("vkImportSemaphoreFdKHR not loaded"); }
	vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR)load(vk_instance, "vkGetSemaphoreFdKHR");
	if (!vkGetSemaphoreFdKHR) { print_msg("vkGetSemaphoreFdKHR not loaded"); }
	vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR)load(vk_instance, "vkCmdPushDescriptorSetKHR");
	if (!vkCmdPushDescriptorSetKHR) { print_msg("vkCmdPushDescriptorSetKHR not loaded"); }
	vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR)load(vk_instance, "vkCmdPushDescriptorSetWithTemplateKHR");
	if (!vkCmdPushDescriptorSetWithTemplateKHR) { print_msg("vkCmdPushDescriptorSetWithTemplateKHR not loaded"); }
	vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR)load(vk_instance, "vkCreateDescriptorUpdateTemplateKHR");
	if (!vkCreateDescriptorUpdateTemplateKHR) { print_msg("vkCreateDescriptorUpdateTemplateKHR not loaded"); }
	vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR)load(vk_instance, "vkDestroyDescriptorUpdateTemplateKHR");
	if (!vkDestroyDescriptorUpdateTemplateKHR) { print_msg("vkDestroyDescriptorUpdateTemplateKHR not loaded"); }
	vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR)load(vk_instance, "vkUpdateDescriptorSetWithTemplateKHR");
	if (!vkUpdateDescriptorSetWithTemplateKHR) { print_msg("vkUpdateDescriptorSetWithTemplateKHR not loaded"); }
	vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR)load(vk_instance, "vkCreateRenderPass2KHR");
	if (!vkCreateRenderPass2KHR) { print_msg("vkCreateRenderPass2KHR not loaded"); }
	vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR)load(vk_instance, "vkCmdBeginRenderPass2KHR");
	if (!vkCmdBeginRenderPass2KHR) { print_msg("vkCmdBeginRenderPass2KHR not loaded"); }
	vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR)load(vk_instance, "vkCmdNextSubpass2KHR");
	if (!vkCmdNextSubpass2KHR) { print_msg("vkCmdNextSubpass2KHR not loaded"); }
	vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR)load(vk_instance, "vkCmdEndRenderPass2KHR");
	if (!vkCmdEndRenderPass2KHR) { print_msg("vkCmdEndRenderPass2KHR not loaded"); }
	vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR)load(vk_instance, "vkGetSwapchainStatusKHR");
	if (!vkGetSwapchainStatusKHR) { print_msg("vkGetSwapchainStatusKHR not loaded"); }
	vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
	if (!vkGetPhysicalDeviceExternalFencePropertiesKHR) { print_msg("vkGetPhysicalDeviceExternalFencePropertiesKHR not loaded"); }
	vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR)load(vk_instance, "vkImportFenceFdKHR");
	if (!vkImportFenceFdKHR) { print_msg("vkImportFenceFdKHR not loaded"); }
	vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR)load(vk_instance, "vkGetFenceFdKHR");
	if (!vkGetFenceFdKHR) { print_msg("vkGetFenceFdKHR not loaded"); }
	vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)load(vk_instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
	if (!vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) { print_msg("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR not loaded"); }
	vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)load(vk_instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
	if (!vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) { print_msg("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR not loaded"); }
	vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR)load(vk_instance, "vkAcquireProfilingLockKHR");
	if (!vkAcquireProfilingLockKHR) { print_msg("vkAcquireProfilingLockKHR not loaded"); }
	vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR)load(vk_instance, "vkReleaseProfilingLockKHR");
	if (!vkReleaseProfilingLockKHR) { print_msg("vkReleaseProfilingLockKHR not loaded"); }
	vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)load(vk_instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
	if (!vkGetPhysicalDeviceSurfaceCapabilities2KHR) { print_msg("vkGetPhysicalDeviceSurfaceCapabilities2KHR not loaded"); }
	vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)load(vk_instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
	if (!vkGetPhysicalDeviceSurfaceFormats2KHR) { print_msg("vkGetPhysicalDeviceSurfaceFormats2KHR not loaded"); }
	vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceDisplayProperties2KHR");
	if (!vkGetPhysicalDeviceDisplayProperties2KHR) { print_msg("vkGetPhysicalDeviceDisplayProperties2KHR not loaded"); }
	vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)load(vk_instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
	if (!vkGetPhysicalDeviceDisplayPlaneProperties2KHR) { print_msg("vkGetPhysicalDeviceDisplayPlaneProperties2KHR not loaded"); }
	vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR)load(vk_instance, "vkGetDisplayModeProperties2KHR");
	if (!vkGetDisplayModeProperties2KHR) { print_msg("vkGetDisplayModeProperties2KHR not loaded"); }
	vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR)load(vk_instance, "vkGetDisplayPlaneCapabilities2KHR");
	if (!vkGetDisplayPlaneCapabilities2KHR) { print_msg("vkGetDisplayPlaneCapabilities2KHR not loaded"); }
	vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR)load(vk_instance, "vkGetImageMemoryRequirements2KHR");
	if (!vkGetImageMemoryRequirements2KHR) { print_msg("vkGetImageMemoryRequirements2KHR not loaded"); }
	vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR)load(vk_instance, "vkGetBufferMemoryRequirements2KHR");
	if (!vkGetBufferMemoryRequirements2KHR) { print_msg("vkGetBufferMemoryRequirements2KHR not loaded"); }
	vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR)load(vk_instance, "vkGetImageSparseMemoryRequirements2KHR");
	if (!vkGetImageSparseMemoryRequirements2KHR) { print_msg("vkGetImageSparseMemoryRequirements2KHR not loaded"); }
	vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR)load(vk_instance, "vkCreateSamplerYcbcrConversionKHR");
	if (!vkCreateSamplerYcbcrConversionKHR) { print_msg("vkCreateSamplerYcbcrConversionKHR not loaded"); }
	vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR)load(vk_instance, "vkDestroySamplerYcbcrConversionKHR");
	if (!vkDestroySamplerYcbcrConversionKHR) { print_msg("vkDestroySamplerYcbcrConversionKHR not loaded"); }
	vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR)load(vk_instance, "vkBindBufferMemory2KHR");
	if (!vkBindBufferMemory2KHR) { print_msg("vkBindBufferMemory2KHR not loaded"); }
	vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR)load(vk_instance, "vkBindImageMemory2KHR");
	if (!vkBindImageMemory2KHR) { print_msg("vkBindImageMemory2KHR not loaded"); }
	vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR)load(vk_instance, "vkGetDescriptorSetLayoutSupportKHR");
	if (!vkGetDescriptorSetLayoutSupportKHR) { print_msg("vkGetDescriptorSetLayoutSupportKHR not loaded"); }
	vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)load(vk_instance, "vkCmdDrawIndirectCountKHR");
	if (!vkCmdDrawIndirectCountKHR) { print_msg("vkCmdDrawIndirectCountKHR not loaded"); }
	vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)load(vk_instance, "vkCmdDrawIndexedIndirectCountKHR");
	if (!vkCmdDrawIndexedIndirectCountKHR) { print_msg("vkCmdDrawIndexedIndirectCountKHR not loaded"); }
	vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR)load(vk_instance, "vkGetSemaphoreCounterValueKHR");
	if (!vkGetSemaphoreCounterValueKHR) { print_msg("vkGetSemaphoreCounterValueKHR not loaded"); }
	vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR)load(vk_instance, "vkWaitSemaphoresKHR");
	if (!vkWaitSemaphoresKHR) { print_msg("vkWaitSemaphoresKHR not loaded"); }
	vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR)load(vk_instance, "vkSignalSemaphoreKHR");
	if (!vkSignalSemaphoreKHR) { print_msg("vkSignalSemaphoreKHR not loaded"); }
	vkGetPhysicalDeviceFragmentShadingRatesKHR = (PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)load(vk_instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
	if (!vkGetPhysicalDeviceFragmentShadingRatesKHR) { print_msg("vkGetPhysicalDeviceFragmentShadingRatesKHR not loaded"); }
	vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR)load(vk_instance, "vkCmdSetFragmentShadingRateKHR");
	if (!vkCmdSetFragmentShadingRateKHR) { print_msg("vkCmdSetFragmentShadingRateKHR not loaded"); }
	vkCmdSetRenderingAttachmentLocationsKHR = (PFN_vkCmdSetRenderingAttachmentLocationsKHR)load(vk_instance, "vkCmdSetRenderingAttachmentLocationsKHR");
	if (!vkCmdSetRenderingAttachmentLocationsKHR) { print_msg("vkCmdSetRenderingAttachmentLocationsKHR not loaded"); }
	vkCmdSetRenderingInputAttachmentIndicesKHR = (PFN_vkCmdSetRenderingInputAttachmentIndicesKHR)load(vk_instance, "vkCmdSetRenderingInputAttachmentIndicesKHR");
	if (!vkCmdSetRenderingInputAttachmentIndicesKHR) { print_msg("vkCmdSetRenderingInputAttachmentIndicesKHR not loaded"); }
	vkWaitForPresentKHR = (PFN_vkWaitForPresentKHR)load(vk_instance, "vkWaitForPresentKHR");
	if (!vkWaitForPresentKHR) { print_msg("vkWaitForPresentKHR not loaded"); }
	vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)load(vk_instance, "vkGetBufferDeviceAddressKHR");
	if (!vkGetBufferDeviceAddressKHR) { print_msg("vkGetBufferDeviceAddressKHR not loaded"); }
	vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR)load(vk_instance, "vkGetBufferOpaqueCaptureAddressKHR");
	if (!vkGetBufferOpaqueCaptureAddressKHR) { print_msg("vkGetBufferOpaqueCaptureAddressKHR not loaded"); }
	vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)load(vk_instance, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
	if (!vkGetDeviceMemoryOpaqueCaptureAddressKHR) { print_msg("vkGetDeviceMemoryOpaqueCaptureAddressKHR not loaded"); }
	vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR)load(vk_instance, "vkCreateDeferredOperationKHR");
	if (!vkCreateDeferredOperationKHR) { print_msg("vkCreateDeferredOperationKHR not loaded"); }
	vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR)load(vk_instance, "vkDestroyDeferredOperationKHR");
	if (!vkDestroyDeferredOperationKHR) { print_msg("vkDestroyDeferredOperationKHR not loaded"); }
	vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR)load(vk_instance, "vkGetDeferredOperationMaxConcurrencyKHR");
	if (!vkGetDeferredOperationMaxConcurrencyKHR) { print_msg("vkGetDeferredOperationMaxConcurrencyKHR not loaded"); }
	vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR)load(vk_instance, "vkGetDeferredOperationResultKHR");
	if (!vkGetDeferredOperationResultKHR) { print_msg("vkGetDeferredOperationResultKHR not loaded"); }
	vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR)load(vk_instance, "vkDeferredOperationJoinKHR");
	if (!vkDeferredOperationJoinKHR) { print_msg("vkDeferredOperationJoinKHR not loaded"); }
	vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR)load(vk_instance, "vkGetPipelineExecutablePropertiesKHR");
	if (!vkGetPipelineExecutablePropertiesKHR) { print_msg("vkGetPipelineExecutablePropertiesKHR not loaded"); }
	vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR)load(vk_instance, "vkGetPipelineExecutableStatisticsKHR");
	if (!vkGetPipelineExecutableStatisticsKHR) { print_msg("vkGetPipelineExecutableStatisticsKHR not loaded"); }
	vkGetPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR)load(vk_instance, "vkGetPipelineExecutableInternalRepresentationsKHR");
	if (!vkGetPipelineExecutableInternalRepresentationsKHR) { print_msg("vkGetPipelineExecutableInternalRepresentationsKHR not loaded"); }
	vkMapMemory2KHR = (PFN_vkMapMemory2KHR)load(vk_instance, "vkMapMemory2KHR");
	if (!vkMapMemory2KHR) { print_msg("vkMapMemory2KHR not loaded"); }
	vkUnmapMemory2KHR = (PFN_vkUnmapMemory2KHR)load(vk_instance, "vkUnmapMemory2KHR");
	if (!vkUnmapMemory2KHR) { print_msg("vkUnmapMemory2KHR not loaded"); }
	vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
	if (!vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) { print_msg("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR not loaded"); }
	vkGetEncodedVideoSessionParametersKHR = (PFN_vkGetEncodedVideoSessionParametersKHR)load(vk_instance, "vkGetEncodedVideoSessionParametersKHR");
	if (!vkGetEncodedVideoSessionParametersKHR) { print_msg("vkGetEncodedVideoSessionParametersKHR not loaded"); }
	vkCmdEncodeVideoKHR = (PFN_vkCmdEncodeVideoKHR)load(vk_instance, "vkCmdEncodeVideoKHR");
	if (!vkCmdEncodeVideoKHR) { print_msg("vkCmdEncodeVideoKHR not loaded"); }
	vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR)load(vk_instance, "vkCmdSetEvent2KHR");
	if (!vkCmdSetEvent2KHR) { print_msg("vkCmdSetEvent2KHR not loaded"); }
	vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR)load(vk_instance, "vkCmdResetEvent2KHR");
	if (!vkCmdResetEvent2KHR) { print_msg("vkCmdResetEvent2KHR not loaded"); }
	vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR)load(vk_instance, "vkCmdWaitEvents2KHR");
	if (!vkCmdWaitEvents2KHR) { print_msg("vkCmdWaitEvents2KHR not loaded"); }
	vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)load(vk_instance, "vkCmdPipelineBarrier2KHR");
	if (!vkCmdPipelineBarrier2KHR) { print_msg("vkCmdPipelineBarrier2KHR not loaded"); }
	vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR)load(vk_instance, "vkCmdWriteTimestamp2KHR");
	if (!vkCmdWriteTimestamp2KHR) { print_msg("vkCmdWriteTimestamp2KHR not loaded"); }
	vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR)load(vk_instance, "vkQueueSubmit2KHR");
	if (!vkQueueSubmit2KHR) { print_msg("vkQueueSubmit2KHR not loaded"); }
	vkCmdWriteBufferMarker2AMD = (PFN_vkCmdWriteBufferMarker2AMD)load(vk_instance, "vkCmdWriteBufferMarker2AMD");
	if (!vkCmdWriteBufferMarker2AMD) { print_msg("vkCmdWriteBufferMarker2AMD not loaded"); }
	vkGetQueueCheckpointData2NV = (PFN_vkGetQueueCheckpointData2NV)load(vk_instance, "vkGetQueueCheckpointData2NV");
	if (!vkGetQueueCheckpointData2NV) { print_msg("vkGetQueueCheckpointData2NV not loaded"); }
	vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR)load(vk_instance, "vkCmdCopyBuffer2KHR");
	if (!vkCmdCopyBuffer2KHR) { print_msg("vkCmdCopyBuffer2KHR not loaded"); }
	vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR)load(vk_instance, "vkCmdCopyImage2KHR");
	if (!vkCmdCopyImage2KHR) { print_msg("vkCmdCopyImage2KHR not loaded"); }
	vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR)load(vk_instance, "vkCmdCopyBufferToImage2KHR");
	if (!vkCmdCopyBufferToImage2KHR) { print_msg("vkCmdCopyBufferToImage2KHR not loaded"); }
	vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR)load(vk_instance, "vkCmdCopyImageToBuffer2KHR");
	if (!vkCmdCopyImageToBuffer2KHR) { print_msg("vkCmdCopyImageToBuffer2KHR not loaded"); }
	vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR)load(vk_instance, "vkCmdBlitImage2KHR");
	if (!vkCmdBlitImage2KHR) { print_msg("vkCmdBlitImage2KHR not loaded"); }
	vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR)load(vk_instance, "vkCmdResolveImage2KHR");
	if (!vkCmdResolveImage2KHR) { print_msg("vkCmdResolveImage2KHR not loaded"); }
	vkCmdTraceRaysIndirect2KHR = (PFN_vkCmdTraceRaysIndirect2KHR)load(vk_instance, "vkCmdTraceRaysIndirect2KHR");
	if (!vkCmdTraceRaysIndirect2KHR) { print_msg("vkCmdTraceRaysIndirect2KHR not loaded"); }
	vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR)load(vk_instance, "vkGetDeviceBufferMemoryRequirementsKHR");
	if (!vkGetDeviceBufferMemoryRequirementsKHR) { print_msg("vkGetDeviceBufferMemoryRequirementsKHR not loaded"); }
	vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR)load(vk_instance, "vkGetDeviceImageMemoryRequirementsKHR");
	if (!vkGetDeviceImageMemoryRequirementsKHR) { print_msg("vkGetDeviceImageMemoryRequirementsKHR not loaded"); }
	vkGetDeviceImageSparseMemoryRequirementsKHR = (PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)load(vk_instance, "vkGetDeviceImageSparseMemoryRequirementsKHR");
	if (!vkGetDeviceImageSparseMemoryRequirementsKHR) { print_msg("vkGetDeviceImageSparseMemoryRequirementsKHR not loaded"); }
	vkCmdBindIndexBuffer2KHR = (PFN_vkCmdBindIndexBuffer2KHR)load(vk_instance, "vkCmdBindIndexBuffer2KHR");
	if (!vkCmdBindIndexBuffer2KHR) { print_msg("vkCmdBindIndexBuffer2KHR not loaded"); }
	vkGetRenderingAreaGranularityKHR = (PFN_vkGetRenderingAreaGranularityKHR)load(vk_instance, "vkGetRenderingAreaGranularityKHR");
	if (!vkGetRenderingAreaGranularityKHR) { print_msg("vkGetRenderingAreaGranularityKHR not loaded"); }
	vkGetDeviceImageSubresourceLayoutKHR = (PFN_vkGetDeviceImageSubresourceLayoutKHR)load(vk_instance, "vkGetDeviceImageSubresourceLayoutKHR");
	if (!vkGetDeviceImageSubresourceLayoutKHR) { print_msg("vkGetDeviceImageSubresourceLayoutKHR not loaded"); }
	vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR)load(vk_instance, "vkGetImageSubresourceLayout2KHR");
	if (!vkGetImageSubresourceLayout2KHR) { print_msg("vkGetImageSubresourceLayout2KHR not loaded"); }
	vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)load(vk_instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
	if (!vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) { print_msg("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR not loaded"); }
	vkCmdSetLineStippleKHR = (PFN_vkCmdSetLineStippleKHR)load(vk_instance, "vkCmdSetLineStippleKHR");
	if (!vkCmdSetLineStippleKHR) { print_msg("vkCmdSetLineStippleKHR not loaded"); }
	vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)load(vk_instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
	if (!vkGetPhysicalDeviceCalibrateableTimeDomainsKHR) { print_msg("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR not loaded"); }
	vkGetCalibratedTimestampsKHR = (PFN_vkGetCalibratedTimestampsKHR)load(vk_instance, "vkGetCalibratedTimestampsKHR");
	if (!vkGetCalibratedTimestampsKHR) { print_msg("vkGetCalibratedTimestampsKHR not loaded"); }
	vkCmdBindDescriptorSets2KHR = (PFN_vkCmdBindDescriptorSets2KHR)load(vk_instance, "vkCmdBindDescriptorSets2KHR");
	if (!vkCmdBindDescriptorSets2KHR) { print_msg("vkCmdBindDescriptorSets2KHR not loaded"); }
	vkCmdPushConstants2KHR = (PFN_vkCmdPushConstants2KHR)load(vk_instance, "vkCmdPushConstants2KHR");
	if (!vkCmdPushConstants2KHR) { print_msg("vkCmdPushConstants2KHR not loaded"); }
	vkCmdPushDescriptorSet2KHR = (PFN_vkCmdPushDescriptorSet2KHR)load(vk_instance, "vkCmdPushDescriptorSet2KHR");
	if (!vkCmdPushDescriptorSet2KHR) { print_msg("vkCmdPushDescriptorSet2KHR not loaded"); }
	vkCmdPushDescriptorSetWithTemplate2KHR = (PFN_vkCmdPushDescriptorSetWithTemplate2KHR)load(vk_instance, "vkCmdPushDescriptorSetWithTemplate2KHR");
	if (!vkCmdPushDescriptorSetWithTemplate2KHR) { print_msg("vkCmdPushDescriptorSetWithTemplate2KHR not loaded"); }
	vkCmdSetDescriptorBufferOffsets2EXT = (PFN_vkCmdSetDescriptorBufferOffsets2EXT)load(vk_instance, "vkCmdSetDescriptorBufferOffsets2EXT");
	if (!vkCmdSetDescriptorBufferOffsets2EXT) { print_msg("vkCmdSetDescriptorBufferOffsets2EXT not loaded"); }
	vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)load(vk_instance, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
	if (!vkCmdBindDescriptorBufferEmbeddedSamplers2EXT) { print_msg("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT not loaded"); }
	vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT)load(vk_instance, "vkCreateDebugReportCallbackEXT");
	if (!vkCreateDebugReportCallbackEXT) { print_msg("vkCreateDebugReportCallbackEXT not loaded"); }
	vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT)load(vk_instance, "vkDestroyDebugReportCallbackEXT");
	if (!vkDestroyDebugReportCallbackEXT) { print_msg("vkDestroyDebugReportCallbackEXT not loaded"); }
	vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT)load(vk_instance, "vkDebugReportMessageEXT");
	if (!vkDebugReportMessageEXT) { print_msg("vkDebugReportMessageEXT not loaded"); }
	vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT)load(vk_instance, "vkDebugMarkerSetObjectTagEXT");
	if (!vkDebugMarkerSetObjectTagEXT) { print_msg("vkDebugMarkerSetObjectTagEXT not loaded"); }
	vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT)load(vk_instance, "vkDebugMarkerSetObjectNameEXT");
	if (!vkDebugMarkerSetObjectNameEXT) { print_msg("vkDebugMarkerSetObjectNameEXT not loaded"); }
	vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT)load(vk_instance, "vkCmdDebugMarkerBeginEXT");
	if (!vkCmdDebugMarkerBeginEXT) { print_msg("vkCmdDebugMarkerBeginEXT not loaded"); }
	vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT)load(vk_instance, "vkCmdDebugMarkerEndEXT");
	if (!vkCmdDebugMarkerEndEXT) { print_msg("vkCmdDebugMarkerEndEXT not loaded"); }
	vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT)load(vk_instance, "vkCmdDebugMarkerInsertEXT");
	if (!vkCmdDebugMarkerInsertEXT) { print_msg("vkCmdDebugMarkerInsertEXT not loaded"); }
	vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT)load(vk_instance, "vkCmdBindTransformFeedbackBuffersEXT");
	if (!vkCmdBindTransformFeedbackBuffersEXT) { print_msg("vkCmdBindTransformFeedbackBuffersEXT not loaded"); }
	vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT)load(vk_instance, "vkCmdBeginTransformFeedbackEXT");
	if (!vkCmdBeginTransformFeedbackEXT) { print_msg("vkCmdBeginTransformFeedbackEXT not loaded"); }
	vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT)load(vk_instance, "vkCmdEndTransformFeedbackEXT");
	if (!vkCmdEndTransformFeedbackEXT) { print_msg("vkCmdEndTransformFeedbackEXT not loaded"); }
	vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT)load(vk_instance, "vkCmdBeginQueryIndexedEXT");
	if (!vkCmdBeginQueryIndexedEXT) { print_msg("vkCmdBeginQueryIndexedEXT not loaded"); }
	vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT)load(vk_instance, "vkCmdEndQueryIndexedEXT");
	if (!vkCmdEndQueryIndexedEXT) { print_msg("vkCmdEndQueryIndexedEXT not loaded"); }
	vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT)load(vk_instance, "vkCmdDrawIndirectByteCountEXT");
	if (!vkCmdDrawIndirectByteCountEXT) { print_msg("vkCmdDrawIndirectByteCountEXT not loaded"); }
	vkCreateCuModuleNVX = (PFN_vkCreateCuModuleNVX)load(vk_instance, "vkCreateCuModuleNVX");
	if (!vkCreateCuModuleNVX) { print_msg("vkCreateCuModuleNVX not loaded"); }
	vkCreateCuFunctionNVX = (PFN_vkCreateCuFunctionNVX)load(vk_instance, "vkCreateCuFunctionNVX");
	if (!vkCreateCuFunctionNVX) { print_msg("vkCreateCuFunctionNVX not loaded"); }
	vkDestroyCuModuleNVX = (PFN_vkDestroyCuModuleNVX)load(vk_instance, "vkDestroyCuModuleNVX");
	if (!vkDestroyCuModuleNVX) { print_msg("vkDestroyCuModuleNVX not loaded"); }
	vkDestroyCuFunctionNVX = (PFN_vkDestroyCuFunctionNVX)load(vk_instance, "vkDestroyCuFunctionNVX");
	if (!vkDestroyCuFunctionNVX) { print_msg("vkDestroyCuFunctionNVX not loaded"); }
	vkCmdCuLaunchKernelNVX = (PFN_vkCmdCuLaunchKernelNVX)load(vk_instance, "vkCmdCuLaunchKernelNVX");
	if (!vkCmdCuLaunchKernelNVX) { print_msg("vkCmdCuLaunchKernelNVX not loaded"); }
	vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX)load(vk_instance, "vkGetImageViewHandleNVX");
	if (!vkGetImageViewHandleNVX) { print_msg("vkGetImageViewHandleNVX not loaded"); }
	vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX)load(vk_instance, "vkGetImageViewAddressNVX");
	if (!vkGetImageViewAddressNVX) { print_msg("vkGetImageViewAddressNVX not loaded"); }
	vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)load(vk_instance, "vkCmdDrawIndirectCountAMD");
	if (!vkCmdDrawIndirectCountAMD) { print_msg("vkCmdDrawIndirectCountAMD not loaded"); }
	vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)load(vk_instance, "vkCmdDrawIndexedIndirectCountAMD");
	if (!vkCmdDrawIndexedIndirectCountAMD) { print_msg("vkCmdDrawIndexedIndirectCountAMD not loaded"); }
	vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD)load(vk_instance, "vkGetShaderInfoAMD");
	if (!vkGetShaderInfoAMD) { print_msg("vkGetShaderInfoAMD not loaded"); }
	vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)load(vk_instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
	if (!vkGetPhysicalDeviceExternalImageFormatPropertiesNV) { print_msg("vkGetPhysicalDeviceExternalImageFormatPropertiesNV not loaded"); }
	vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT)load(vk_instance, "vkCmdBeginConditionalRenderingEXT");
	if (!vkCmdBeginConditionalRenderingEXT) { print_msg("vkCmdBeginConditionalRenderingEXT not loaded"); }
	vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT)load(vk_instance, "vkCmdEndConditionalRenderingEXT");
	if (!vkCmdEndConditionalRenderingEXT) { print_msg("vkCmdEndConditionalRenderingEXT not loaded"); }
	vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV)load(vk_instance, "vkCmdSetViewportWScalingNV");
	if (!vkCmdSetViewportWScalingNV) { print_msg("vkCmdSetViewportWScalingNV not loaded"); }
	vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT)load(vk_instance, "vkReleaseDisplayEXT");
	if (!vkReleaseDisplayEXT) { print_msg("vkReleaseDisplayEXT not loaded"); }
	vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)load(vk_instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
	if (!vkGetPhysicalDeviceSurfaceCapabilities2EXT) { print_msg("vkGetPhysicalDeviceSurfaceCapabilities2EXT not loaded"); }
	vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT)load(vk_instance, "vkDisplayPowerControlEXT");
	if (!vkDisplayPowerControlEXT) { print_msg("vkDisplayPowerControlEXT not loaded"); }
	vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT)load(vk_instance, "vkRegisterDeviceEventEXT");
	if (!vkRegisterDeviceEventEXT) { print_msg("vkRegisterDeviceEventEXT not loaded"); }
	vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT)load(vk_instance, "vkRegisterDisplayEventEXT");
	if (!vkRegisterDisplayEventEXT) { print_msg("vkRegisterDisplayEventEXT not loaded"); }
	vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT)load(vk_instance, "vkGetSwapchainCounterEXT");
	if (!vkGetSwapchainCounterEXT) { print_msg("vkGetSwapchainCounterEXT not loaded"); }
	vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE)load(vk_instance, "vkGetRefreshCycleDurationGOOGLE");
	if (!vkGetRefreshCycleDurationGOOGLE) { print_msg("vkGetRefreshCycleDurationGOOGLE not loaded"); }
	vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE)load(vk_instance, "vkGetPastPresentationTimingGOOGLE");
	if (!vkGetPastPresentationTimingGOOGLE) { print_msg("vkGetPastPresentationTimingGOOGLE not loaded"); }
	vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT)load(vk_instance, "vkCmdSetDiscardRectangleEXT");
	if (!vkCmdSetDiscardRectangleEXT) { print_msg("vkCmdSetDiscardRectangleEXT not loaded"); }
	vkCmdSetDiscardRectangleEnableEXT = (PFN_vkCmdSetDiscardRectangleEnableEXT)load(vk_instance, "vkCmdSetDiscardRectangleEnableEXT");
	if (!vkCmdSetDiscardRectangleEnableEXT) { print_msg("vkCmdSetDiscardRectangleEnableEXT not loaded"); }
	vkCmdSetDiscardRectangleModeEXT = (PFN_vkCmdSetDiscardRectangleModeEXT)load(vk_instance, "vkCmdSetDiscardRectangleModeEXT");
	if (!vkCmdSetDiscardRectangleModeEXT) { print_msg("vkCmdSetDiscardRectangleModeEXT not loaded"); }
	vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT)load(vk_instance, "vkSetHdrMetadataEXT");
	if (!vkSetHdrMetadataEXT) { print_msg("vkSetHdrMetadataEXT not loaded"); }
	vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT)load(vk_instance, "vkSetDebugUtilsObjectNameEXT");
	if (!vkSetDebugUtilsObjectNameEXT) { print_msg("vkSetDebugUtilsObjectNameEXT not loaded"); }
	vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT)load(vk_instance, "vkSetDebugUtilsObjectTagEXT");
	if (!vkSetDebugUtilsObjectTagEXT) { print_msg("vkSetDebugUtilsObjectTagEXT not loaded"); }
	vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT)load(vk_instance, "vkQueueBeginDebugUtilsLabelEXT");
	if (!vkQueueBeginDebugUtilsLabelEXT) { print_msg("vkQueueBeginDebugUtilsLabelEXT not loaded"); }
	vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT)load(vk_instance, "vkQueueEndDebugUtilsLabelEXT");
	if (!vkQueueEndDebugUtilsLabelEXT) { print_msg("vkQueueEndDebugUtilsLabelEXT not loaded"); }
	vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT)load(vk_instance, "vkQueueInsertDebugUtilsLabelEXT");
	if (!vkQueueInsertDebugUtilsLabelEXT) { print_msg("vkQueueInsertDebugUtilsLabelEXT not loaded"); }
	vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT)load(vk_instance, "vkCmdBeginDebugUtilsLabelEXT");
	if (!vkCmdBeginDebugUtilsLabelEXT) { print_msg("vkCmdBeginDebugUtilsLabelEXT not loaded"); }
	vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT)load(vk_instance, "vkCmdEndDebugUtilsLabelEXT");
	if (!vkCmdEndDebugUtilsLabelEXT) { print_msg("vkCmdEndDebugUtilsLabelEXT not loaded"); }
	vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT)load(vk_instance, "vkCmdInsertDebugUtilsLabelEXT");
	if (!vkCmdInsertDebugUtilsLabelEXT) { print_msg("vkCmdInsertDebugUtilsLabelEXT not loaded"); }
	vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)load(vk_instance, "vkCreateDebugUtilsMessengerEXT");
	if (!vkCreateDebugUtilsMessengerEXT) { print_msg("vkCreateDebugUtilsMessengerEXT not loaded"); }
	vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT)load(vk_instance, "vkDestroyDebugUtilsMessengerEXT");
	if (!vkDestroyDebugUtilsMessengerEXT) { print_msg("vkDestroyDebugUtilsMessengerEXT not loaded"); }
	vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT)load(vk_instance, "vkSubmitDebugUtilsMessageEXT");
	if (!vkSubmitDebugUtilsMessageEXT) { print_msg("vkSubmitDebugUtilsMessageEXT not loaded"); }
	vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT)load(vk_instance, "vkCmdSetSampleLocationsEXT");
	if (!vkCmdSetSampleLocationsEXT) { print_msg("vkCmdSetSampleLocationsEXT not loaded"); }
	vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)load(vk_instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
	if (!vkGetPhysicalDeviceMultisamplePropertiesEXT) { print_msg("vkGetPhysicalDeviceMultisamplePropertiesEXT not loaded"); }
	vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT)load(vk_instance, "vkGetImageDrmFormatModifierPropertiesEXT");
	if (!vkGetImageDrmFormatModifierPropertiesEXT) { print_msg("vkGetImageDrmFormatModifierPropertiesEXT not loaded"); }
	vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT)load(vk_instance, "vkCreateValidationCacheEXT");
	if (!vkCreateValidationCacheEXT) { print_msg("vkCreateValidationCacheEXT not loaded"); }
	vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT)load(vk_instance, "vkDestroyValidationCacheEXT");
	if (!vkDestroyValidationCacheEXT) { print_msg("vkDestroyValidationCacheEXT not loaded"); }
	vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT)load(vk_instance, "vkMergeValidationCachesEXT");
	if (!vkMergeValidationCachesEXT) { print_msg("vkMergeValidationCachesEXT not loaded"); }
	vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT)load(vk_instance, "vkGetValidationCacheDataEXT");
	if (!vkGetValidationCacheDataEXT) { print_msg("vkGetValidationCacheDataEXT not loaded"); }
	vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV)load(vk_instance, "vkCmdBindShadingRateImageNV");
	if (!vkCmdBindShadingRateImageNV) { print_msg("vkCmdBindShadingRateImageNV not loaded"); }
	vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV)load(vk_instance, "vkCmdSetViewportShadingRatePaletteNV");
	if (!vkCmdSetViewportShadingRatePaletteNV) { print_msg("vkCmdSetViewportShadingRatePaletteNV not loaded"); }
	vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV)load(vk_instance, "vkCmdSetCoarseSampleOrderNV");
	if (!vkCmdSetCoarseSampleOrderNV) { print_msg("vkCmdSetCoarseSampleOrderNV not loaded"); }
	vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV)load(vk_instance, "vkCreateAccelerationStructureNV");
	if (!vkCreateAccelerationStructureNV) { print_msg("vkCreateAccelerationStructureNV not loaded"); }
	vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV)load(vk_instance, "vkDestroyAccelerationStructureNV");
	if (!vkDestroyAccelerationStructureNV) { print_msg("vkDestroyAccelerationStructureNV not loaded"); }
	vkGetAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV)load(vk_instance, "vkGetAccelerationStructureMemoryRequirementsNV");
	if (!vkGetAccelerationStructureMemoryRequirementsNV) { print_msg("vkGetAccelerationStructureMemoryRequirementsNV not loaded"); }
	vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV)load(vk_instance, "vkBindAccelerationStructureMemoryNV");
	if (!vkBindAccelerationStructureMemoryNV) { print_msg("vkBindAccelerationStructureMemoryNV not loaded"); }
	vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV)load(vk_instance, "vkCmdBuildAccelerationStructureNV");
	if (!vkCmdBuildAccelerationStructureNV) { print_msg("vkCmdBuildAccelerationStructureNV not loaded"); }
	vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV)load(vk_instance, "vkCmdCopyAccelerationStructureNV");
	if (!vkCmdCopyAccelerationStructureNV) { print_msg("vkCmdCopyAccelerationStructureNV not loaded"); }
	vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV)load(vk_instance, "vkCmdTraceRaysNV");
	if (!vkCmdTraceRaysNV) { print_msg("vkCmdTraceRaysNV not loaded"); }
	vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV)load(vk_instance, "vkCreateRayTracingPipelinesNV");
	if (!vkCreateRayTracingPipelinesNV) { print_msg("vkCreateRayTracingPipelinesNV not loaded"); }
	vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)load(vk_instance, "vkGetRayTracingShaderGroupHandlesKHR");
	if (!vkGetRayTracingShaderGroupHandlesKHR) { print_msg("vkGetRayTracingShaderGroupHandlesKHR not loaded"); }
	vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV)load(vk_instance, "vkGetRayTracingShaderGroupHandlesNV");
	if (!vkGetRayTracingShaderGroupHandlesNV) { print_msg("vkGetRayTracingShaderGroupHandlesNV not loaded"); }
	vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV)load(vk_instance, "vkGetAccelerationStructureHandleNV");
	if (!vkGetAccelerationStructureHandleNV) { print_msg("vkGetAccelerationStructureHandleNV not loaded"); }
	vkCmdWriteAccelerationStructuresPropertiesNV = (PFN_vkCmdWriteAccelerationStructuresPropertiesNV)load(vk_instance, "vkCmdWriteAccelerationStructuresPropertiesNV");
	if (!vkCmdWriteAccelerationStructuresPropertiesNV) { print_msg("vkCmdWriteAccelerationStructuresPropertiesNV not loaded"); }
	vkCompileDeferredNV = (PFN_vkCompileDeferredNV)load(vk_instance, "vkCompileDeferredNV");
	if (!vkCompileDeferredNV) { print_msg("vkCompileDeferredNV not loaded"); }
	vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT)load(vk_instance, "vkGetMemoryHostPointerPropertiesEXT");
	if (!vkGetMemoryHostPointerPropertiesEXT) { print_msg("vkGetMemoryHostPointerPropertiesEXT not loaded"); }
	vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD)load(vk_instance, "vkCmdWriteBufferMarkerAMD");
	if (!vkCmdWriteBufferMarkerAMD) { print_msg("vkCmdWriteBufferMarkerAMD not loaded"); }
	vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)load(vk_instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
	if (!vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) { print_msg("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT not loaded"); }
	vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT)load(vk_instance, "vkGetCalibratedTimestampsEXT");
	if (!vkGetCalibratedTimestampsEXT) { print_msg("vkGetCalibratedTimestampsEXT not loaded"); }
	vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV)load(vk_instance, "vkCmdDrawMeshTasksNV");
	if (!vkCmdDrawMeshTasksNV) { print_msg("vkCmdDrawMeshTasksNV not loaded"); }
	vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV)load(vk_instance, "vkCmdDrawMeshTasksIndirectNV");
	if (!vkCmdDrawMeshTasksIndirectNV) { print_msg("vkCmdDrawMeshTasksIndirectNV not loaded"); }
	vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV)load(vk_instance, "vkCmdDrawMeshTasksIndirectCountNV");
	if (!vkCmdDrawMeshTasksIndirectCountNV) { print_msg("vkCmdDrawMeshTasksIndirectCountNV not loaded"); }
	vkCmdSetExclusiveScissorEnableNV = (PFN_vkCmdSetExclusiveScissorEnableNV)load(vk_instance, "vkCmdSetExclusiveScissorEnableNV");
	if (!vkCmdSetExclusiveScissorEnableNV) { print_msg("vkCmdSetExclusiveScissorEnableNV not loaded"); }
	vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV)load(vk_instance, "vkCmdSetExclusiveScissorNV");
	if (!vkCmdSetExclusiveScissorNV) { print_msg("vkCmdSetExclusiveScissorNV not loaded"); }
	vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV)load(vk_instance, "vkCmdSetCheckpointNV");
	if (!vkCmdSetCheckpointNV) { print_msg("vkCmdSetCheckpointNV not loaded"); }
	vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV)load(vk_instance, "vkGetQueueCheckpointDataNV");
	if (!vkGetQueueCheckpointDataNV) { print_msg("vkGetQueueCheckpointDataNV not loaded"); }
	vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL)load(vk_instance, "vkInitializePerformanceApiINTEL");
	if (!vkInitializePerformanceApiINTEL) { print_msg("vkInitializePerformanceApiINTEL not loaded"); }
	vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL)load(vk_instance, "vkUninitializePerformanceApiINTEL");
	if (!vkUninitializePerformanceApiINTEL) { print_msg("vkUninitializePerformanceApiINTEL not loaded"); }
	vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL)load(vk_instance, "vkCmdSetPerformanceMarkerINTEL");
	if (!vkCmdSetPerformanceMarkerINTEL) { print_msg("vkCmdSetPerformanceMarkerINTEL not loaded"); }
	vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL)load(vk_instance, "vkCmdSetPerformanceStreamMarkerINTEL");
	if (!vkCmdSetPerformanceStreamMarkerINTEL) { print_msg("vkCmdSetPerformanceStreamMarkerINTEL not loaded"); }
	vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL)load(vk_instance, "vkCmdSetPerformanceOverrideINTEL");
	if (!vkCmdSetPerformanceOverrideINTEL) { print_msg("vkCmdSetPerformanceOverrideINTEL not loaded"); }
	vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL)load(vk_instance, "vkAcquirePerformanceConfigurationINTEL");
	if (!vkAcquirePerformanceConfigurationINTEL) { print_msg("vkAcquirePerformanceConfigurationINTEL not loaded"); }
	vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL)load(vk_instance, "vkReleasePerformanceConfigurationINTEL");
	if (!vkReleasePerformanceConfigurationINTEL) { print_msg("vkReleasePerformanceConfigurationINTEL not loaded"); }
	vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL)load(vk_instance, "vkQueueSetPerformanceConfigurationINTEL");
	if (!vkQueueSetPerformanceConfigurationINTEL) { print_msg("vkQueueSetPerformanceConfigurationINTEL not loaded"); }
	vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL)load(vk_instance, "vkGetPerformanceParameterINTEL");
	if (!vkGetPerformanceParameterINTEL) { print_msg("vkGetPerformanceParameterINTEL not loaded"); }
	vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD)load(vk_instance, "vkSetLocalDimmingAMD");
	if (!vkSetLocalDimmingAMD) { print_msg("vkSetLocalDimmingAMD not loaded"); }
	vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)load(vk_instance, "vkGetBufferDeviceAddressEXT");
	if (!vkGetBufferDeviceAddressEXT) { print_msg("vkGetBufferDeviceAddressEXT not loaded"); }
	vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT)load(vk_instance, "vkGetPhysicalDeviceToolPropertiesEXT");
	if (!vkGetPhysicalDeviceToolPropertiesEXT) { print_msg("vkGetPhysicalDeviceToolPropertiesEXT not loaded"); }
	vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)load(vk_instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
	if (!vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) { print_msg("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV not loaded"); }
	vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)load(vk_instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
	if (!vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) { print_msg("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV not loaded"); }
	vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT)load(vk_instance, "vkCreateHeadlessSurfaceEXT");
	if (!vkCreateHeadlessSurfaceEXT) { print_msg("vkCreateHeadlessSurfaceEXT not loaded"); }
	vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT)load(vk_instance, "vkCmdSetLineStippleEXT");
	if (!vkCmdSetLineStippleEXT) { print_msg("vkCmdSetLineStippleEXT not loaded"); }
	vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT)load(vk_instance, "vkResetQueryPoolEXT");
	if (!vkResetQueryPoolEXT) { print_msg("vkResetQueryPoolEXT not loaded"); }
	vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)load(vk_instance, "vkCmdSetCullModeEXT");
	if (!vkCmdSetCullModeEXT) { print_msg("vkCmdSetCullModeEXT not loaded"); }
	vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)load(vk_instance, "vkCmdSetFrontFaceEXT");
	if (!vkCmdSetFrontFaceEXT) { print_msg("vkCmdSetFrontFaceEXT not loaded"); }
	vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)load(vk_instance, "vkCmdSetPrimitiveTopologyEXT");
	if (!vkCmdSetPrimitiveTopologyEXT) { print_msg("vkCmdSetPrimitiveTopologyEXT not loaded"); }
	vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)load(vk_instance, "vkCmdSetViewportWithCountEXT");
	if (!vkCmdSetViewportWithCountEXT) { print_msg("vkCmdSetViewportWithCountEXT not loaded"); }
	vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)load(vk_instance, "vkCmdSetScissorWithCountEXT");
	if (!vkCmdSetScissorWithCountEXT) { print_msg("vkCmdSetScissorWithCountEXT not loaded"); }
	vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)load(vk_instance, "vkCmdBindVertexBuffers2EXT");
	if (!vkCmdBindVertexBuffers2EXT) { print_msg("vkCmdBindVertexBuffers2EXT not loaded"); }
	vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)load(vk_instance, "vkCmdSetDepthTestEnableEXT");
	if (!vkCmdSetDepthTestEnableEXT) { print_msg("vkCmdSetDepthTestEnableEXT not loaded"); }
	vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)load(vk_instance, "vkCmdSetDepthWriteEnableEXT");
	if (!vkCmdSetDepthWriteEnableEXT) { print_msg("vkCmdSetDepthWriteEnableEXT not loaded"); }
	vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)load(vk_instance, "vkCmdSetDepthCompareOpEXT");
	if (!vkCmdSetDepthCompareOpEXT) { print_msg("vkCmdSetDepthCompareOpEXT not loaded"); }
	vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)load(vk_instance, "vkCmdSetDepthBoundsTestEnableEXT");
	if (!vkCmdSetDepthBoundsTestEnableEXT) { print_msg("vkCmdSetDepthBoundsTestEnableEXT not loaded"); }
	vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)load(vk_instance, "vkCmdSetStencilTestEnableEXT");
	if (!vkCmdSetStencilTestEnableEXT) { print_msg("vkCmdSetStencilTestEnableEXT not loaded"); }
	vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)load(vk_instance, "vkCmdSetStencilOpEXT");
	if (!vkCmdSetStencilOpEXT) { print_msg("vkCmdSetStencilOpEXT not loaded"); }
	vkCopyMemoryToImageEXT = (PFN_vkCopyMemoryToImageEXT)load(vk_instance, "vkCopyMemoryToImageEXT");
	if (!vkCopyMemoryToImageEXT) { print_msg("vkCopyMemoryToImageEXT not loaded"); }
	vkCopyImageToMemoryEXT = (PFN_vkCopyImageToMemoryEXT)load(vk_instance, "vkCopyImageToMemoryEXT");
	if (!vkCopyImageToMemoryEXT) { print_msg("vkCopyImageToMemoryEXT not loaded"); }
	vkCopyImageToImageEXT = (PFN_vkCopyImageToImageEXT)load(vk_instance, "vkCopyImageToImageEXT");
	if (!vkCopyImageToImageEXT) { print_msg("vkCopyImageToImageEXT not loaded"); }
	vkTransitionImageLayoutEXT = (PFN_vkTransitionImageLayoutEXT)load(vk_instance, "vkTransitionImageLayoutEXT");
	if (!vkTransitionImageLayoutEXT) { print_msg("vkTransitionImageLayoutEXT not loaded"); }
	vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)load(vk_instance, "vkGetImageSubresourceLayout2EXT");
	if (!vkGetImageSubresourceLayout2EXT) { print_msg("vkGetImageSubresourceLayout2EXT not loaded"); }
	vkReleaseSwapchainImagesEXT = (PFN_vkReleaseSwapchainImagesEXT)load(vk_instance, "vkReleaseSwapchainImagesEXT");
	if (!vkReleaseSwapchainImagesEXT) { print_msg("vkReleaseSwapchainImagesEXT not loaded"); }
	vkGetGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV)load(vk_instance, "vkGetGeneratedCommandsMemoryRequirementsNV");
	if (!vkGetGeneratedCommandsMemoryRequirementsNV) { print_msg("vkGetGeneratedCommandsMemoryRequirementsNV not loaded"); }
	vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV)load(vk_instance, "vkCmdPreprocessGeneratedCommandsNV");
	if (!vkCmdPreprocessGeneratedCommandsNV) { print_msg("vkCmdPreprocessGeneratedCommandsNV not loaded"); }
	vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV)load(vk_instance, "vkCmdExecuteGeneratedCommandsNV");
	if (!vkCmdExecuteGeneratedCommandsNV) { print_msg("vkCmdExecuteGeneratedCommandsNV not loaded"); }
	vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV)load(vk_instance, "vkCmdBindPipelineShaderGroupNV");
	if (!vkCmdBindPipelineShaderGroupNV) { print_msg("vkCmdBindPipelineShaderGroupNV not loaded"); }
	vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV)load(vk_instance, "vkCreateIndirectCommandsLayoutNV");
	if (!vkCreateIndirectCommandsLayoutNV) { print_msg("vkCreateIndirectCommandsLayoutNV not loaded"); }
	vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV)load(vk_instance, "vkDestroyIndirectCommandsLayoutNV");
	if (!vkDestroyIndirectCommandsLayoutNV) { print_msg("vkDestroyIndirectCommandsLayoutNV not loaded"); }
	vkCmdSetDepthBias2EXT = (PFN_vkCmdSetDepthBias2EXT)load(vk_instance, "vkCmdSetDepthBias2EXT");
	if (!vkCmdSetDepthBias2EXT) { print_msg("vkCmdSetDepthBias2EXT not loaded"); }
	vkAcquireDrmDisplayEXT = (PFN_vkAcquireDrmDisplayEXT)load(vk_instance, "vkAcquireDrmDisplayEXT");
	if (!vkAcquireDrmDisplayEXT) { print_msg("vkAcquireDrmDisplayEXT not loaded"); }
	vkGetDrmDisplayEXT = (PFN_vkGetDrmDisplayEXT)load(vk_instance, "vkGetDrmDisplayEXT");
	if (!vkGetDrmDisplayEXT) { print_msg("vkGetDrmDisplayEXT not loaded"); }
	vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)load(vk_instance, "vkCreatePrivateDataSlotEXT");
	if (!vkCreatePrivateDataSlotEXT) { print_msg("vkCreatePrivateDataSlotEXT not loaded"); }
	vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)load(vk_instance, "vkDestroyPrivateDataSlotEXT");
	if (!vkDestroyPrivateDataSlotEXT) { print_msg("vkDestroyPrivateDataSlotEXT not loaded"); }
	vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT)load(vk_instance, "vkSetPrivateDataEXT");
	if (!vkSetPrivateDataEXT) { print_msg("vkSetPrivateDataEXT not loaded"); }
	vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT)load(vk_instance, "vkGetPrivateDataEXT");
	if (!vkGetPrivateDataEXT) { print_msg("vkGetPrivateDataEXT not loaded"); }
	vkCreateCudaModuleNV = (PFN_vkCreateCudaModuleNV)load(vk_instance, "vkCreateCudaModuleNV");
	if (!vkCreateCudaModuleNV) { print_msg("vkCreateCudaModuleNV not loaded"); }
	vkGetCudaModuleCacheNV = (PFN_vkGetCudaModuleCacheNV)load(vk_instance, "vkGetCudaModuleCacheNV");
	if (!vkGetCudaModuleCacheNV) { print_msg("vkGetCudaModuleCacheNV not loaded"); }
	vkCreateCudaFunctionNV = (PFN_vkCreateCudaFunctionNV)load(vk_instance, "vkCreateCudaFunctionNV");
	if (!vkCreateCudaFunctionNV) { print_msg("vkCreateCudaFunctionNV not loaded"); }
	vkDestroyCudaModuleNV = (PFN_vkDestroyCudaModuleNV)load(vk_instance, "vkDestroyCudaModuleNV");
	if (!vkDestroyCudaModuleNV) { print_msg("vkDestroyCudaModuleNV not loaded"); }
	vkDestroyCudaFunctionNV = (PFN_vkDestroyCudaFunctionNV)load(vk_instance, "vkDestroyCudaFunctionNV");
	if (!vkDestroyCudaFunctionNV) { print_msg("vkDestroyCudaFunctionNV not loaded"); }
	vkCmdCudaLaunchKernelNV = (PFN_vkCmdCudaLaunchKernelNV)load(vk_instance, "vkCmdCudaLaunchKernelNV");
	if (!vkCmdCudaLaunchKernelNV) { print_msg("vkCmdCudaLaunchKernelNV not loaded"); }
	vkGetDescriptorSetLayoutSizeEXT = (PFN_vkGetDescriptorSetLayoutSizeEXT)load(vk_instance, "vkGetDescriptorSetLayoutSizeEXT");
	if (!vkGetDescriptorSetLayoutSizeEXT) { print_msg("vkGetDescriptorSetLayoutSizeEXT not loaded"); }
	vkGetDescriptorSetLayoutBindingOffsetEXT = (PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)load(vk_instance, "vkGetDescriptorSetLayoutBindingOffsetEXT");
	if (!vkGetDescriptorSetLayoutBindingOffsetEXT) { print_msg("vkGetDescriptorSetLayoutBindingOffsetEXT not loaded"); }
	vkGetDescriptorEXT = (PFN_vkGetDescriptorEXT)load(vk_instance, "vkGetDescriptorEXT");
	if (!vkGetDescriptorEXT) { print_msg("vkGetDescriptorEXT not loaded"); }
	vkCmdBindDescriptorBuffersEXT = (PFN_vkCmdBindDescriptorBuffersEXT)load(vk_instance, "vkCmdBindDescriptorBuffersEXT");
	if (!vkCmdBindDescriptorBuffersEXT) { print_msg("vkCmdBindDescriptorBuffersEXT not loaded"); }
	vkCmdSetDescriptorBufferOffsetsEXT = (PFN_vkCmdSetDescriptorBufferOffsetsEXT)load(vk_instance, "vkCmdSetDescriptorBufferOffsetsEXT");
	if (!vkCmdSetDescriptorBufferOffsetsEXT) { print_msg("vkCmdSetDescriptorBufferOffsetsEXT not loaded"); }
	vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)load(vk_instance, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
	if (!vkCmdBindDescriptorBufferEmbeddedSamplersEXT) { print_msg("vkCmdBindDescriptorBufferEmbeddedSamplersEXT not loaded"); }
	vkGetBufferOpaqueCaptureDescriptorDataEXT = (PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)load(vk_instance, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
	if (!vkGetBufferOpaqueCaptureDescriptorDataEXT) { print_msg("vkGetBufferOpaqueCaptureDescriptorDataEXT not loaded"); }
	vkGetImageOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)load(vk_instance, "vkGetImageOpaqueCaptureDescriptorDataEXT");
	if (!vkGetImageOpaqueCaptureDescriptorDataEXT) { print_msg("vkGetImageOpaqueCaptureDescriptorDataEXT not loaded"); }
	vkGetImageViewOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)load(vk_instance, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
	if (!vkGetImageViewOpaqueCaptureDescriptorDataEXT) { print_msg("vkGetImageViewOpaqueCaptureDescriptorDataEXT not loaded"); }
	vkGetSamplerOpaqueCaptureDescriptorDataEXT = (PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)load(vk_instance, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
	if (!vkGetSamplerOpaqueCaptureDescriptorDataEXT) { print_msg("vkGetSamplerOpaqueCaptureDescriptorDataEXT not loaded"); }
	vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)load(vk_instance, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
	if (!vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT) { print_msg("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT not loaded"); }
	vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV)load(vk_instance, "vkCmdSetFragmentShadingRateEnumNV");
	if (!vkCmdSetFragmentShadingRateEnumNV) { print_msg("vkCmdSetFragmentShadingRateEnumNV not loaded"); }
	vkGetDeviceFaultInfoEXT = (PFN_vkGetDeviceFaultInfoEXT)load(vk_instance, "vkGetDeviceFaultInfoEXT");
	if (!vkGetDeviceFaultInfoEXT) { print_msg("vkGetDeviceFaultInfoEXT not loaded"); }
	vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT)load(vk_instance, "vkCmdSetVertexInputEXT");
	if (!vkCmdSetVertexInputEXT) { print_msg("vkCmdSetVertexInputEXT not loaded"); }
	vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)load(vk_instance, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
	if (!vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI) { print_msg("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI not loaded"); }
	vkCmdSubpassShadingHUAWEI = (PFN_vkCmdSubpassShadingHUAWEI)load(vk_instance, "vkCmdSubpassShadingHUAWEI");
	if (!vkCmdSubpassShadingHUAWEI) { print_msg("vkCmdSubpassShadingHUAWEI not loaded"); }
	vkCmdBindInvocationMaskHUAWEI = (PFN_vkCmdBindInvocationMaskHUAWEI)load(vk_instance, "vkCmdBindInvocationMaskHUAWEI");
	if (!vkCmdBindInvocationMaskHUAWEI) { print_msg("vkCmdBindInvocationMaskHUAWEI not loaded"); }
	vkGetMemoryRemoteAddressNV = (PFN_vkGetMemoryRemoteAddressNV)load(vk_instance, "vkGetMemoryRemoteAddressNV");
	if (!vkGetMemoryRemoteAddressNV) { print_msg("vkGetMemoryRemoteAddressNV not loaded"); }
	vkGetPipelinePropertiesEXT = (PFN_vkGetPipelinePropertiesEXT)load(vk_instance, "vkGetPipelinePropertiesEXT");
	if (!vkGetPipelinePropertiesEXT) { print_msg("vkGetPipelinePropertiesEXT not loaded"); }
	vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT)load(vk_instance, "vkCmdSetPatchControlPointsEXT");
	if (!vkCmdSetPatchControlPointsEXT) { print_msg("vkCmdSetPatchControlPointsEXT not loaded"); }
	vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)load(vk_instance, "vkCmdSetRasterizerDiscardEnableEXT");
	if (!vkCmdSetRasterizerDiscardEnableEXT) { print_msg("vkCmdSetRasterizerDiscardEnableEXT not loaded"); }
	vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)load(vk_instance, "vkCmdSetDepthBiasEnableEXT");
	if (!vkCmdSetDepthBiasEnableEXT) { print_msg("vkCmdSetDepthBiasEnableEXT not loaded"); }
	vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT)load(vk_instance, "vkCmdSetLogicOpEXT");
	if (!vkCmdSetLogicOpEXT) { print_msg("vkCmdSetLogicOpEXT not loaded"); }
	vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)load(vk_instance, "vkCmdSetPrimitiveRestartEnableEXT");
	if (!vkCmdSetPrimitiveRestartEnableEXT) { print_msg("vkCmdSetPrimitiveRestartEnableEXT not loaded"); }
	vkCmdSetColorWriteEnableEXT = (PFN_vkCmdSetColorWriteEnableEXT)load(vk_instance, "vkCmdSetColorWriteEnableEXT");
	if (!vkCmdSetColorWriteEnableEXT) { print_msg("vkCmdSetColorWriteEnableEXT not loaded"); }
	vkCmdDrawMultiEXT = (PFN_vkCmdDrawMultiEXT)load(vk_instance, "vkCmdDrawMultiEXT");
	if (!vkCmdDrawMultiEXT) { print_msg("vkCmdDrawMultiEXT not loaded"); }
	vkCmdDrawMultiIndexedEXT = (PFN_vkCmdDrawMultiIndexedEXT)load(vk_instance, "vkCmdDrawMultiIndexedEXT");
	if (!vkCmdDrawMultiIndexedEXT) { print_msg("vkCmdDrawMultiIndexedEXT not loaded"); }
	vkCreateMicromapEXT = (PFN_vkCreateMicromapEXT)load(vk_instance, "vkCreateMicromapEXT");
	if (!vkCreateMicromapEXT) { print_msg("vkCreateMicromapEXT not loaded"); }
	vkDestroyMicromapEXT = (PFN_vkDestroyMicromapEXT)load(vk_instance, "vkDestroyMicromapEXT");
	if (!vkDestroyMicromapEXT) { print_msg("vkDestroyMicromapEXT not loaded"); }
	vkCmdBuildMicromapsEXT = (PFN_vkCmdBuildMicromapsEXT)load(vk_instance, "vkCmdBuildMicromapsEXT");
	if (!vkCmdBuildMicromapsEXT) { print_msg("vkCmdBuildMicromapsEXT not loaded"); }
	vkBuildMicromapsEXT = (PFN_vkBuildMicromapsEXT)load(vk_instance, "vkBuildMicromapsEXT");
	if (!vkBuildMicromapsEXT) { print_msg("vkBuildMicromapsEXT not loaded"); }
	vkCopyMicromapEXT = (PFN_vkCopyMicromapEXT)load(vk_instance, "vkCopyMicromapEXT");
	if (!vkCopyMicromapEXT) { print_msg("vkCopyMicromapEXT not loaded"); }
	vkCopyMicromapToMemoryEXT = (PFN_vkCopyMicromapToMemoryEXT)load(vk_instance, "vkCopyMicromapToMemoryEXT");
	if (!vkCopyMicromapToMemoryEXT) { print_msg("vkCopyMicromapToMemoryEXT not loaded"); }
	vkCopyMemoryToMicromapEXT = (PFN_vkCopyMemoryToMicromapEXT)load(vk_instance, "vkCopyMemoryToMicromapEXT");
	if (!vkCopyMemoryToMicromapEXT) { print_msg("vkCopyMemoryToMicromapEXT not loaded"); }
	vkWriteMicromapsPropertiesEXT = (PFN_vkWriteMicromapsPropertiesEXT)load(vk_instance, "vkWriteMicromapsPropertiesEXT");
	if (!vkWriteMicromapsPropertiesEXT) { print_msg("vkWriteMicromapsPropertiesEXT not loaded"); }
	vkCmdCopyMicromapEXT = (PFN_vkCmdCopyMicromapEXT)load(vk_instance, "vkCmdCopyMicromapEXT");
	if (!vkCmdCopyMicromapEXT) { print_msg("vkCmdCopyMicromapEXT not loaded"); }
	vkCmdCopyMicromapToMemoryEXT = (PFN_vkCmdCopyMicromapToMemoryEXT)load(vk_instance, "vkCmdCopyMicromapToMemoryEXT");
	if (!vkCmdCopyMicromapToMemoryEXT) { print_msg("vkCmdCopyMicromapToMemoryEXT not loaded"); }
	vkCmdCopyMemoryToMicromapEXT = (PFN_vkCmdCopyMemoryToMicromapEXT)load(vk_instance, "vkCmdCopyMemoryToMicromapEXT");
	if (!vkCmdCopyMemoryToMicromapEXT) { print_msg("vkCmdCopyMemoryToMicromapEXT not loaded"); }
	vkCmdWriteMicromapsPropertiesEXT = (PFN_vkCmdWriteMicromapsPropertiesEXT)load(vk_instance, "vkCmdWriteMicromapsPropertiesEXT");
	if (!vkCmdWriteMicromapsPropertiesEXT) { print_msg("vkCmdWriteMicromapsPropertiesEXT not loaded"); }
	vkGetDeviceMicromapCompatibilityEXT = (PFN_vkGetDeviceMicromapCompatibilityEXT)load(vk_instance, "vkGetDeviceMicromapCompatibilityEXT");
	if (!vkGetDeviceMicromapCompatibilityEXT) { print_msg("vkGetDeviceMicromapCompatibilityEXT not loaded"); }
	vkGetMicromapBuildSizesEXT = (PFN_vkGetMicromapBuildSizesEXT)load(vk_instance, "vkGetMicromapBuildSizesEXT");
	if (!vkGetMicromapBuildSizesEXT) { print_msg("vkGetMicromapBuildSizesEXT not loaded"); }
	vkCmdDrawClusterHUAWEI = (PFN_vkCmdDrawClusterHUAWEI)load(vk_instance, "vkCmdDrawClusterHUAWEI");
	if (!vkCmdDrawClusterHUAWEI) { print_msg("vkCmdDrawClusterHUAWEI not loaded"); }
	vkCmdDrawClusterIndirectHUAWEI = (PFN_vkCmdDrawClusterIndirectHUAWEI)load(vk_instance, "vkCmdDrawClusterIndirectHUAWEI");
	if (!vkCmdDrawClusterIndirectHUAWEI) { print_msg("vkCmdDrawClusterIndirectHUAWEI not loaded"); }
	vkSetDeviceMemoryPriorityEXT = (PFN_vkSetDeviceMemoryPriorityEXT)load(vk_instance, "vkSetDeviceMemoryPriorityEXT");
	if (!vkSetDeviceMemoryPriorityEXT) { print_msg("vkSetDeviceMemoryPriorityEXT not loaded"); }
	vkGetDescriptorSetLayoutHostMappingInfoVALVE = (PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)load(vk_instance, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
	if (!vkGetDescriptorSetLayoutHostMappingInfoVALVE) { print_msg("vkGetDescriptorSetLayoutHostMappingInfoVALVE not loaded"); }
	vkGetDescriptorSetHostMappingVALVE = (PFN_vkGetDescriptorSetHostMappingVALVE)load(vk_instance, "vkGetDescriptorSetHostMappingVALVE");
	if (!vkGetDescriptorSetHostMappingVALVE) { print_msg("vkGetDescriptorSetHostMappingVALVE not loaded"); }
	vkCmdCopyMemoryIndirectNV = (PFN_vkCmdCopyMemoryIndirectNV)load(vk_instance, "vkCmdCopyMemoryIndirectNV");
	if (!vkCmdCopyMemoryIndirectNV) { print_msg("vkCmdCopyMemoryIndirectNV not loaded"); }
	vkCmdCopyMemoryToImageIndirectNV = (PFN_vkCmdCopyMemoryToImageIndirectNV)load(vk_instance, "vkCmdCopyMemoryToImageIndirectNV");
	if (!vkCmdCopyMemoryToImageIndirectNV) { print_msg("vkCmdCopyMemoryToImageIndirectNV not loaded"); }
	vkCmdDecompressMemoryNV = (PFN_vkCmdDecompressMemoryNV)load(vk_instance, "vkCmdDecompressMemoryNV");
	if (!vkCmdDecompressMemoryNV) { print_msg("vkCmdDecompressMemoryNV not loaded"); }
	vkCmdDecompressMemoryIndirectCountNV = (PFN_vkCmdDecompressMemoryIndirectCountNV)load(vk_instance, "vkCmdDecompressMemoryIndirectCountNV");
	if (!vkCmdDecompressMemoryIndirectCountNV) { print_msg("vkCmdDecompressMemoryIndirectCountNV not loaded"); }
	vkGetPipelineIndirectMemoryRequirementsNV = (PFN_vkGetPipelineIndirectMemoryRequirementsNV)load(vk_instance, "vkGetPipelineIndirectMemoryRequirementsNV");
	if (!vkGetPipelineIndirectMemoryRequirementsNV) { print_msg("vkGetPipelineIndirectMemoryRequirementsNV not loaded"); }
	vkCmdUpdatePipelineIndirectBufferNV = (PFN_vkCmdUpdatePipelineIndirectBufferNV)load(vk_instance, "vkCmdUpdatePipelineIndirectBufferNV");
	if (!vkCmdUpdatePipelineIndirectBufferNV) { print_msg("vkCmdUpdatePipelineIndirectBufferNV not loaded"); }
	vkGetPipelineIndirectDeviceAddressNV = (PFN_vkGetPipelineIndirectDeviceAddressNV)load(vk_instance, "vkGetPipelineIndirectDeviceAddressNV");
	if (!vkGetPipelineIndirectDeviceAddressNV) { print_msg("vkGetPipelineIndirectDeviceAddressNV not loaded"); }
	vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT)load(vk_instance, "vkCmdSetDepthClampEnableEXT");
	if (!vkCmdSetDepthClampEnableEXT) { print_msg("vkCmdSetDepthClampEnableEXT not loaded"); }
	vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT)load(vk_instance, "vkCmdSetPolygonModeEXT");
	if (!vkCmdSetPolygonModeEXT) { print_msg("vkCmdSetPolygonModeEXT not loaded"); }
	vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT)load(vk_instance, "vkCmdSetRasterizationSamplesEXT");
	if (!vkCmdSetRasterizationSamplesEXT) { print_msg("vkCmdSetRasterizationSamplesEXT not loaded"); }
	vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT)load(vk_instance, "vkCmdSetSampleMaskEXT");
	if (!vkCmdSetSampleMaskEXT) { print_msg("vkCmdSetSampleMaskEXT not loaded"); }
	vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT)load(vk_instance, "vkCmdSetAlphaToCoverageEnableEXT");
	if (!vkCmdSetAlphaToCoverageEnableEXT) { print_msg("vkCmdSetAlphaToCoverageEnableEXT not loaded"); }
	vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT)load(vk_instance, "vkCmdSetAlphaToOneEnableEXT");
	if (!vkCmdSetAlphaToOneEnableEXT) { print_msg("vkCmdSetAlphaToOneEnableEXT not loaded"); }
	vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT)load(vk_instance, "vkCmdSetLogicOpEnableEXT");
	if (!vkCmdSetLogicOpEnableEXT) { print_msg("vkCmdSetLogicOpEnableEXT not loaded"); }
	vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT)load(vk_instance, "vkCmdSetColorBlendEnableEXT");
	if (!vkCmdSetColorBlendEnableEXT) { print_msg("vkCmdSetColorBlendEnableEXT not loaded"); }
	vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT)load(vk_instance, "vkCmdSetColorBlendEquationEXT");
	if (!vkCmdSetColorBlendEquationEXT) { print_msg("vkCmdSetColorBlendEquationEXT not loaded"); }
	vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT)load(vk_instance, "vkCmdSetColorWriteMaskEXT");
	if (!vkCmdSetColorWriteMaskEXT) { print_msg("vkCmdSetColorWriteMaskEXT not loaded"); }
	vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT)load(vk_instance, "vkCmdSetTessellationDomainOriginEXT");
	if (!vkCmdSetTessellationDomainOriginEXT) { print_msg("vkCmdSetTessellationDomainOriginEXT not loaded"); }
	vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT)load(vk_instance, "vkCmdSetRasterizationStreamEXT");
	if (!vkCmdSetRasterizationStreamEXT) { print_msg("vkCmdSetRasterizationStreamEXT not loaded"); }
	vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT)load(vk_instance, "vkCmdSetConservativeRasterizationModeEXT");
	if (!vkCmdSetConservativeRasterizationModeEXT) { print_msg("vkCmdSetConservativeRasterizationModeEXT not loaded"); }
	vkCmdSetExtraPrimitiveOverestimationSizeEXT = (PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)load(vk_instance, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
	if (!vkCmdSetExtraPrimitiveOverestimationSizeEXT) { print_msg("vkCmdSetExtraPrimitiveOverestimationSizeEXT not loaded"); }
	vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT)load(vk_instance, "vkCmdSetDepthClipEnableEXT");
	if (!vkCmdSetDepthClipEnableEXT) { print_msg("vkCmdSetDepthClipEnableEXT not loaded"); }
	vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT)load(vk_instance, "vkCmdSetSampleLocationsEnableEXT");
	if (!vkCmdSetSampleLocationsEnableEXT) { print_msg("vkCmdSetSampleLocationsEnableEXT not loaded"); }
	vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT)load(vk_instance, "vkCmdSetColorBlendAdvancedEXT");
	if (!vkCmdSetColorBlendAdvancedEXT) { print_msg("vkCmdSetColorBlendAdvancedEXT not loaded"); }
	vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT)load(vk_instance, "vkCmdSetProvokingVertexModeEXT");
	if (!vkCmdSetProvokingVertexModeEXT) { print_msg("vkCmdSetProvokingVertexModeEXT not loaded"); }
	vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT)load(vk_instance, "vkCmdSetLineRasterizationModeEXT");
	if (!vkCmdSetLineRasterizationModeEXT) { print_msg("vkCmdSetLineRasterizationModeEXT not loaded"); }
	vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT)load(vk_instance, "vkCmdSetLineStippleEnableEXT");
	if (!vkCmdSetLineStippleEnableEXT) { print_msg("vkCmdSetLineStippleEnableEXT not loaded"); }
	vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT)load(vk_instance, "vkCmdSetDepthClipNegativeOneToOneEXT");
	if (!vkCmdSetDepthClipNegativeOneToOneEXT) { print_msg("vkCmdSetDepthClipNegativeOneToOneEXT not loaded"); }
	vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV)load(vk_instance, "vkCmdSetViewportWScalingEnableNV");
	if (!vkCmdSetViewportWScalingEnableNV) { print_msg("vkCmdSetViewportWScalingEnableNV not loaded"); }
	vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV)load(vk_instance, "vkCmdSetViewportSwizzleNV");
	if (!vkCmdSetViewportSwizzleNV) { print_msg("vkCmdSetViewportSwizzleNV not loaded"); }
	vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV)load(vk_instance, "vkCmdSetCoverageToColorEnableNV");
	if (!vkCmdSetCoverageToColorEnableNV) { print_msg("vkCmdSetCoverageToColorEnableNV not loaded"); }
	vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV)load(vk_instance, "vkCmdSetCoverageToColorLocationNV");
	if (!vkCmdSetCoverageToColorLocationNV) { print_msg("vkCmdSetCoverageToColorLocationNV not loaded"); }
	vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV)load(vk_instance, "vkCmdSetCoverageModulationModeNV");
	if (!vkCmdSetCoverageModulationModeNV) { print_msg("vkCmdSetCoverageModulationModeNV not loaded"); }
	vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV)load(vk_instance, "vkCmdSetCoverageModulationTableEnableNV");
	if (!vkCmdSetCoverageModulationTableEnableNV) { print_msg("vkCmdSetCoverageModulationTableEnableNV not loaded"); }
	vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV)load(vk_instance, "vkCmdSetCoverageModulationTableNV");
	if (!vkCmdSetCoverageModulationTableNV) { print_msg("vkCmdSetCoverageModulationTableNV not loaded"); }
	vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV)load(vk_instance, "vkCmdSetShadingRateImageEnableNV");
	if (!vkCmdSetShadingRateImageEnableNV) { print_msg("vkCmdSetShadingRateImageEnableNV not loaded"); }
	vkCmdSetRepresentativeFragmentTestEnableNV = (PFN_vkCmdSetRepresentativeFragmentTestEnableNV)load(vk_instance, "vkCmdSetRepresentativeFragmentTestEnableNV");
	if (!vkCmdSetRepresentativeFragmentTestEnableNV) { print_msg("vkCmdSetRepresentativeFragmentTestEnableNV not loaded"); }
	vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV)load(vk_instance, "vkCmdSetCoverageReductionModeNV");
	if (!vkCmdSetCoverageReductionModeNV) { print_msg("vkCmdSetCoverageReductionModeNV not loaded"); }
	vkGetShaderModuleIdentifierEXT = (PFN_vkGetShaderModuleIdentifierEXT)load(vk_instance, "vkGetShaderModuleIdentifierEXT");
	if (!vkGetShaderModuleIdentifierEXT) { print_msg("vkGetShaderModuleIdentifierEXT not loaded"); }
	vkGetShaderModuleCreateInfoIdentifierEXT = (PFN_vkGetShaderModuleCreateInfoIdentifierEXT)load(vk_instance, "vkGetShaderModuleCreateInfoIdentifierEXT");
	if (!vkGetShaderModuleCreateInfoIdentifierEXT) { print_msg("vkGetShaderModuleCreateInfoIdentifierEXT not loaded"); }
	vkGetPhysicalDeviceOpticalFlowImageFormatsNV = (PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)load(vk_instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
	if (!vkGetPhysicalDeviceOpticalFlowImageFormatsNV) { print_msg("vkGetPhysicalDeviceOpticalFlowImageFormatsNV not loaded"); }
	vkCreateOpticalFlowSessionNV = (PFN_vkCreateOpticalFlowSessionNV)load(vk_instance, "vkCreateOpticalFlowSessionNV");
	if (!vkCreateOpticalFlowSessionNV) { print_msg("vkCreateOpticalFlowSessionNV not loaded"); }
	vkDestroyOpticalFlowSessionNV = (PFN_vkDestroyOpticalFlowSessionNV)load(vk_instance, "vkDestroyOpticalFlowSessionNV");
	if (!vkDestroyOpticalFlowSessionNV) { print_msg("vkDestroyOpticalFlowSessionNV not loaded"); }
	vkBindOpticalFlowSessionImageNV = (PFN_vkBindOpticalFlowSessionImageNV)load(vk_instance, "vkBindOpticalFlowSessionImageNV");
	if (!vkBindOpticalFlowSessionImageNV) { print_msg("vkBindOpticalFlowSessionImageNV not loaded"); }
	vkCmdOpticalFlowExecuteNV = (PFN_vkCmdOpticalFlowExecuteNV)load(vk_instance, "vkCmdOpticalFlowExecuteNV");
	if (!vkCmdOpticalFlowExecuteNV) { print_msg("vkCmdOpticalFlowExecuteNV not loaded"); }
	vkCreateShadersEXT = (PFN_vkCreateShadersEXT)load(vk_instance, "vkCreateShadersEXT");
	if (!vkCreateShadersEXT) { print_msg("vkCreateShadersEXT not loaded"); }
	vkDestroyShaderEXT = (PFN_vkDestroyShaderEXT)load(vk_instance, "vkDestroyShaderEXT");
	if (!vkDestroyShaderEXT) { print_msg("vkDestroyShaderEXT not loaded"); }
	vkGetShaderBinaryDataEXT = (PFN_vkGetShaderBinaryDataEXT)load(vk_instance, "vkGetShaderBinaryDataEXT");
	if (!vkGetShaderBinaryDataEXT) { print_msg("vkGetShaderBinaryDataEXT not loaded"); }
	vkCmdBindShadersEXT = (PFN_vkCmdBindShadersEXT)load(vk_instance, "vkCmdBindShadersEXT");
	if (!vkCmdBindShadersEXT) { print_msg("vkCmdBindShadersEXT not loaded"); }
	vkGetFramebufferTilePropertiesQCOM = (PFN_vkGetFramebufferTilePropertiesQCOM)load(vk_instance, "vkGetFramebufferTilePropertiesQCOM");
	if (!vkGetFramebufferTilePropertiesQCOM) { print_msg("vkGetFramebufferTilePropertiesQCOM not loaded"); }
	vkGetDynamicRenderingTilePropertiesQCOM = (PFN_vkGetDynamicRenderingTilePropertiesQCOM)load(vk_instance, "vkGetDynamicRenderingTilePropertiesQCOM");
	if (!vkGetDynamicRenderingTilePropertiesQCOM) { print_msg("vkGetDynamicRenderingTilePropertiesQCOM not loaded"); }
	vkSetLatencySleepModeNV = (PFN_vkSetLatencySleepModeNV)load(vk_instance, "vkSetLatencySleepModeNV");
	if (!vkSetLatencySleepModeNV) { print_msg("vkSetLatencySleepModeNV not loaded"); }
	vkLatencySleepNV = (PFN_vkLatencySleepNV)load(vk_instance, "vkLatencySleepNV");
	if (!vkLatencySleepNV) { print_msg("vkLatencySleepNV not loaded"); }
	vkSetLatencyMarkerNV = (PFN_vkSetLatencyMarkerNV)load(vk_instance, "vkSetLatencyMarkerNV");
	if (!vkSetLatencyMarkerNV) { print_msg("vkSetLatencyMarkerNV not loaded"); }
	vkGetLatencyTimingsNV = (PFN_vkGetLatencyTimingsNV)load(vk_instance, "vkGetLatencyTimingsNV");
	if (!vkGetLatencyTimingsNV) { print_msg("vkGetLatencyTimingsNV not loaded"); }
	vkQueueNotifyOutOfBandNV = (PFN_vkQueueNotifyOutOfBandNV)load(vk_instance, "vkQueueNotifyOutOfBandNV");
	if (!vkQueueNotifyOutOfBandNV) { print_msg("vkQueueNotifyOutOfBandNV not loaded"); }
	vkCmdSetAttachmentFeedbackLoopEnableEXT = (PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)load(vk_instance, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
	if (!vkCmdSetAttachmentFeedbackLoopEnableEXT) { print_msg("vkCmdSetAttachmentFeedbackLoopEnableEXT not loaded"); }
	vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR)load(vk_instance, "vkCreateAccelerationStructureKHR");
	if (!vkCreateAccelerationStructureKHR) { print_msg("vkCreateAccelerationStructureKHR not loaded"); }
	vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR)load(vk_instance, "vkDestroyAccelerationStructureKHR");
	if (!vkDestroyAccelerationStructureKHR) { print_msg("vkDestroyAccelerationStructureKHR not loaded"); }
	vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR)load(vk_instance, "vkCmdBuildAccelerationStructuresKHR");
	if (!vkCmdBuildAccelerationStructuresKHR) { print_msg("vkCmdBuildAccelerationStructuresKHR not loaded"); }
	vkCmdBuildAccelerationStructuresIndirectKHR = (PFN_vkCmdBuildAccelerationStructuresIndirectKHR)load(vk_instance, "vkCmdBuildAccelerationStructuresIndirectKHR");
	if (!vkCmdBuildAccelerationStructuresIndirectKHR) { print_msg("vkCmdBuildAccelerationStructuresIndirectKHR not loaded"); }
	vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR)load(vk_instance, "vkBuildAccelerationStructuresKHR");
	if (!vkBuildAccelerationStructuresKHR) { print_msg("vkBuildAccelerationStructuresKHR not loaded"); }
	vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR)load(vk_instance, "vkCopyAccelerationStructureKHR");
	if (!vkCopyAccelerationStructureKHR) { print_msg("vkCopyAccelerationStructureKHR not loaded"); }
	vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR)load(vk_instance, "vkCopyAccelerationStructureToMemoryKHR");
	if (!vkCopyAccelerationStructureToMemoryKHR) { print_msg("vkCopyAccelerationStructureToMemoryKHR not loaded"); }
	vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR)load(vk_instance, "vkCopyMemoryToAccelerationStructureKHR");
	if (!vkCopyMemoryToAccelerationStructureKHR) { print_msg("vkCopyMemoryToAccelerationStructureKHR not loaded"); }
	vkWriteAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR)load(vk_instance, "vkWriteAccelerationStructuresPropertiesKHR");
	if (!vkWriteAccelerationStructuresPropertiesKHR) { print_msg("vkWriteAccelerationStructuresPropertiesKHR not loaded"); }
	vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR)load(vk_instance, "vkCmdCopyAccelerationStructureKHR");
	if (!vkCmdCopyAccelerationStructureKHR) { print_msg("vkCmdCopyAccelerationStructureKHR not loaded"); }
	vkCmdCopyAccelerationStructureToMemoryKHR = (PFN_vkCmdCopyAccelerationStructureToMemoryKHR)load(vk_instance, "vkCmdCopyAccelerationStructureToMemoryKHR");
	if (!vkCmdCopyAccelerationStructureToMemoryKHR) { print_msg("vkCmdCopyAccelerationStructureToMemoryKHR not loaded"); }
	vkCmdCopyMemoryToAccelerationStructureKHR = (PFN_vkCmdCopyMemoryToAccelerationStructureKHR)load(vk_instance, "vkCmdCopyMemoryToAccelerationStructureKHR");
	if (!vkCmdCopyMemoryToAccelerationStructureKHR) { print_msg("vkCmdCopyMemoryToAccelerationStructureKHR not loaded"); }
	vkGetAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR)load(vk_instance, "vkGetAccelerationStructureDeviceAddressKHR");
	if (!vkGetAccelerationStructureDeviceAddressKHR) { print_msg("vkGetAccelerationStructureDeviceAddressKHR not loaded"); }
	vkCmdWriteAccelerationStructuresPropertiesKHR = (PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)load(vk_instance, "vkCmdWriteAccelerationStructuresPropertiesKHR");
	if (!vkCmdWriteAccelerationStructuresPropertiesKHR) { print_msg("vkCmdWriteAccelerationStructuresPropertiesKHR not loaded"); }
	vkGetDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)load(vk_instance, "vkGetDeviceAccelerationStructureCompatibilityKHR");
	if (!vkGetDeviceAccelerationStructureCompatibilityKHR) { print_msg("vkGetDeviceAccelerationStructureCompatibilityKHR not loaded"); }
	vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR)load(vk_instance, "vkGetAccelerationStructureBuildSizesKHR");
	if (!vkGetAccelerationStructureBuildSizesKHR) { print_msg("vkGetAccelerationStructureBuildSizesKHR not loaded"); }
	vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR)load(vk_instance, "vkCmdTraceRaysKHR");
	if (!vkCmdTraceRaysKHR) { print_msg("vkCmdTraceRaysKHR not loaded"); }
	vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR)load(vk_instance, "vkCreateRayTracingPipelinesKHR");
	if (!vkCreateRayTracingPipelinesKHR) { print_msg("vkCreateRayTracingPipelinesKHR not loaded"); }
	vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)load(vk_instance, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	if (!vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) { print_msg("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR not loaded"); }
	vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR)load(vk_instance, "vkCmdTraceRaysIndirectKHR");
	if (!vkCmdTraceRaysIndirectKHR) { print_msg("vkCmdTraceRaysIndirectKHR not loaded"); }
	vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR)load(vk_instance, "vkGetRayTracingShaderGroupStackSizeKHR");
	if (!vkGetRayTracingShaderGroupStackSizeKHR) { print_msg("vkGetRayTracingShaderGroupStackSizeKHR not loaded"); }
	vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR)load(vk_instance, "vkCmdSetRayTracingPipelineStackSizeKHR");
	if (!vkCmdSetRayTracingPipelineStackSizeKHR) { print_msg("vkCmdSetRayTracingPipelineStackSizeKHR not loaded"); }
	vkCmdDrawMeshTasksEXT = (PFN_vkCmdDrawMeshTasksEXT)load(vk_instance, "vkCmdDrawMeshTasksEXT");
	if (!vkCmdDrawMeshTasksEXT) { print_msg("vkCmdDrawMeshTasksEXT not loaded"); }
	vkCmdDrawMeshTasksIndirectEXT = (PFN_vkCmdDrawMeshTasksIndirectEXT)load(vk_instance, "vkCmdDrawMeshTasksIndirectEXT");
	if (!vkCmdDrawMeshTasksIndirectEXT) { print_msg("vkCmdDrawMeshTasksIndirectEXT not loaded"); }
	vkCmdDrawMeshTasksIndirectCountEXT = (PFN_vkCmdDrawMeshTasksIndirectCountEXT)load(vk_instance, "vkCmdDrawMeshTasksIndirectCountEXT");
	if (!vkCmdDrawMeshTasksIndirectCountEXT) { print_msg("vkCmdDrawMeshTasksIndirectCountEXT not loaded"); }
}


void vkfnlib_load_core(PFN_loadfunc_vk load, VkInstance vk_instance) {
	vkfnlib_init_VK_VERSION_1_0(load, vk_instance);
	vkfnlib_init_VK_VERSION_1_1(load, vk_instance);
	vkfnlib_init_VK_VERSION_1_2(load, vk_instance);
	vkfnlib_init_VK_VERSION_1_3(load, vk_instance);
}
