#pragma once

#include <glcorearb.h>

typedef void (*PFN_apiproc)(void);
typedef PFN_apiproc (*PFN_loadfunc_gl)(const char *name);

//#define GL_LOADER_CORE_PRINT_ERRORS


// GL_VERSION_1_0
// GLAPI void APIENTRY glCullFace (GLenum mode);
extern PFNGLCULLFACEPROC glCullFace;
// GLAPI void APIENTRY glFrontFace (GLenum mode);
extern PFNGLFRONTFACEPROC glFrontFace;
// GLAPI void APIENTRY glHint (GLenum target, GLenum mode);
extern PFNGLHINTPROC glHint;
// GLAPI void APIENTRY glLineWidth (GLfloat width);
extern PFNGLLINEWIDTHPROC glLineWidth;
// GLAPI void APIENTRY glPointSize (GLfloat size);
extern PFNGLPOINTSIZEPROC glPointSize;
// GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
extern PFNGLPOLYGONMODEPROC glPolygonMode;
// GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLSCISSORPROC glScissor;
// GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXPARAMETERFPROC glTexParameterf;
// GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
extern PFNGLTEXPARAMETERFVPROC glTexParameterfv;
// GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
extern PFNGLTEXPARAMETERIPROC glTexParameteri;
// GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIVPROC glTexParameteriv;
// GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE1DPROC glTexImage1D;
// GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE2DPROC glTexImage2D;
// GLAPI void APIENTRY glDrawBuffer (GLenum buf);
extern PFNGLDRAWBUFFERPROC glDrawBuffer;
// GLAPI void APIENTRY glClear (GLbitfield mask);
extern PFNGLCLEARPROC glClear;
// GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARCOLORPROC glClearColor;
// GLAPI void APIENTRY glClearStencil (GLint s);
extern PFNGLCLEARSTENCILPROC glClearStencil;
// GLAPI void APIENTRY glClearDepth (GLdouble depth);
extern PFNGLCLEARDEPTHPROC glClearDepth;
// GLAPI void APIENTRY glStencilMask (GLuint mask);
extern PFNGLSTENCILMASKPROC glStencilMask;
// GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFNGLCOLORMASKPROC glColorMask;
// GLAPI void APIENTRY glDepthMask (GLboolean flag);
extern PFNGLDEPTHMASKPROC glDepthMask;
// GLAPI void APIENTRY glDisable (GLenum cap);
extern PFNGLDISABLEPROC glDisable;
// GLAPI void APIENTRY glEnable (GLenum cap);
extern PFNGLENABLEPROC glEnable;
// GLAPI void APIENTRY glFinish (void);
extern PFNGLFINISHPROC glFinish;
// GLAPI void APIENTRY glFlush (void);
extern PFNGLFLUSHPROC glFlush;
// GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
extern PFNGLBLENDFUNCPROC glBlendFunc;
// GLAPI void APIENTRY glLogicOp (GLenum opcode);
extern PFNGLLOGICOPPROC glLogicOp;
// GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCPROC glStencilFunc;
// GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
extern PFNGLSTENCILOPPROC glStencilOp;
// GLAPI void APIENTRY glDepthFunc (GLenum func);
extern PFNGLDEPTHFUNCPROC glDepthFunc;
// GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
extern PFNGLPIXELSTOREFPROC glPixelStoref;
// GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
extern PFNGLPIXELSTOREIPROC glPixelStorei;
// GLAPI void APIENTRY glReadBuffer (GLenum src);
extern PFNGLREADBUFFERPROC glReadBuffer;
// GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
extern PFNGLREADPIXELSPROC glReadPixels;
// GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
extern PFNGLGETBOOLEANVPROC glGetBooleanv;
// GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);
extern PFNGLGETDOUBLEVPROC glGetDoublev;
// GLAPI GLenum APIENTRY glGetError (void);
extern PFNGLGETERRORPROC glGetError;
// GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
extern PFNGLGETFLOATVPROC glGetFloatv;
// GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);
extern PFNGLGETINTEGERVPROC glGetIntegerv;
// GLAPI const GLubyte *APIENTRY glGetString (GLenum name);
extern PFNGLGETSTRINGPROC glGetString;
// GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
extern PFNGLGETTEXIMAGEPROC glGetTexImage;
// GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
// GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
// GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
extern PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
// GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
extern PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
// GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
extern PFNGLISENABLEDPROC glIsEnabled;
// GLAPI void APIENTRY glDepthRange (GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEPROC glDepthRange;
// GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLVIEWPORTPROC glViewport;


// GL_VERSION_1_1
// GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
extern PFNGLDRAWARRAYSPROC glDrawArrays;
// GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWELEMENTSPROC glDrawElements;
// GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);
extern PFNGLGETPOINTERVPROC glGetPointerv;
// GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
extern PFNGLPOLYGONOFFSETPROC glPolygonOffset;
// GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
// GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
// GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
// GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
// GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
// GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
// GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
extern PFNGLBINDTEXTUREPROC glBindTexture;
// GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
extern PFNGLDELETETEXTURESPROC glDeleteTextures;
// GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
extern PFNGLGENTEXTURESPROC glGenTextures;
// GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);
extern PFNGLISTEXTUREPROC glIsTexture;


// GL_VERSION_1_2
// GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
// GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE3DPROC glTexImage3D;
// GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
// GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;


// GL_VERSION_1_3
// GLAPI void APIENTRY glActiveTexture (GLenum texture);
extern PFNGLACTIVETEXTUREPROC glActiveTexture;
// GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);
extern PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
// GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
// GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
// GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
// GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
// GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
// GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
// GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;


// GL_VERSION_1_4
// GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
// GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
extern PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
// GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
extern PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
// GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
extern PFNGLPOINTPARAMETERFPROC glPointParameterf;
// GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
extern PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
// GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
extern PFNGLPOINTPARAMETERIPROC glPointParameteri;
// GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
extern PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
// GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLBLENDCOLORPROC glBlendColor;
// GLAPI void APIENTRY glBlendEquation (GLenum mode);
extern PFNGLBLENDEQUATIONPROC glBlendEquation;


// GL_VERSION_1_5
// GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
extern PFNGLGENQUERIESPROC glGenQueries;
// GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
extern PFNGLDELETEQUERIESPROC glDeleteQueries;
// GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
extern PFNGLISQUERYPROC glIsQuery;
// GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
extern PFNGLBEGINQUERYPROC glBeginQuery;
// GLAPI void APIENTRY glEndQuery (GLenum target);
extern PFNGLENDQUERYPROC glEndQuery;
// GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETQUERYIVPROC glGetQueryiv;
// GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
extern PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
// GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
extern PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
// GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
extern PFNGLBINDBUFFERPROC glBindBuffer;
// GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
extern PFNGLDELETEBUFFERSPROC glDeleteBuffers;
// GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
extern PFNGLGENBUFFERSPROC glGenBuffers;
// GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
extern PFNGLISBUFFERPROC glIsBuffer;
// GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
extern PFNGLBUFFERDATAPROC glBufferData;
// GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
extern PFNGLBUFFERSUBDATAPROC glBufferSubData;
// GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
extern PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
// GLAPI void *APIENTRY glMapBuffer (GLenum target, GLenum access);
extern PFNGLMAPBUFFERPROC glMapBuffer;
// GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
extern PFNGLUNMAPBUFFERPROC glUnmapBuffer;
// GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
// GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params);
extern PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;


// GL_VERSION_2_0
// GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
// GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
extern PFNGLDRAWBUFFERSPROC glDrawBuffers;
// GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
// GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
// GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
extern PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
// GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
extern PFNGLATTACHSHADERPROC glAttachShader;
// GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
extern PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
// GLAPI void APIENTRY glCompileShader (GLuint shader);
extern PFNGLCOMPILESHADERPROC glCompileShader;
// GLAPI GLuint APIENTRY glCreateProgram (void);
extern PFNGLCREATEPROGRAMPROC glCreateProgram;
// GLAPI GLuint APIENTRY glCreateShader (GLenum type);
extern PFNGLCREATESHADERPROC glCreateShader;
// GLAPI void APIENTRY glDeleteProgram (GLuint program);
extern PFNGLDELETEPROGRAMPROC glDeleteProgram;
// GLAPI void APIENTRY glDeleteShader (GLuint shader);
extern PFNGLDELETESHADERPROC glDeleteShader;
// GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
extern PFNGLDETACHSHADERPROC glDetachShader;
// GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
// GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
// GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
// GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
// GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
extern PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
// GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
extern PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
// GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMIVPROC glGetProgramiv;
// GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
// GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
extern PFNGLGETSHADERIVPROC glGetShaderiv;
// GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
// GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
extern PFNGLGETSHADERSOURCEPROC glGetShaderSource;
// GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
extern PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
// GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
extern PFNGLGETUNIFORMFVPROC glGetUniformfv;
// GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
extern PFNGLGETUNIFORMIVPROC glGetUniformiv;
// GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
// GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
extern PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
// GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
// GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer);
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
// GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
extern PFNGLISPROGRAMPROC glIsProgram;
// GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
extern PFNGLISSHADERPROC glIsShader;
// GLAPI void APIENTRY glLinkProgram (GLuint program);
extern PFNGLLINKPROGRAMPROC glLinkProgram;
// GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
extern PFNGLSHADERSOURCEPROC glShaderSource;
// GLAPI void APIENTRY glUseProgram (GLuint program);
extern PFNGLUSEPROGRAMPROC glUseProgram;
// GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
extern PFNGLUNIFORM1FPROC glUniform1f;
// GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
extern PFNGLUNIFORM2FPROC glUniform2f;
// GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLUNIFORM3FPROC glUniform3f;
// GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLUNIFORM4FPROC glUniform4f;
// GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
extern PFNGLUNIFORM1IPROC glUniform1i;
// GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
extern PFNGLUNIFORM2IPROC glUniform2i;
// GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLUNIFORM3IPROC glUniform3i;
// GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLUNIFORM4IPROC glUniform4i;
// GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM1FVPROC glUniform1fv;
// GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM2FVPROC glUniform2fv;
// GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM3FVPROC glUniform3fv;
// GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM4FVPROC glUniform4fv;
// GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM1IVPROC glUniform1iv;
// GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM2IVPROC glUniform2iv;
// GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM3IVPROC glUniform3iv;
// GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM4IVPROC glUniform4iv;
// GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
// GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
// GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
// GLAPI void APIENTRY glValidateProgram (GLuint program);
extern PFNGLVALIDATEPROGRAMPROC glValidateProgram;
// GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
// GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
// GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
extern PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
// GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
// GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
extern PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
// GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
// GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
// GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
// GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
extern PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
// GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
// GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
extern PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
// GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
// GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
// GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
// GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
// GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
// GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
// GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
// GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
// GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
// GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
// GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
// GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
// GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
// GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
// GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
// GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
// GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
// GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
// GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
// GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
// GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
// GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
// GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
// GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
// GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
// GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;


// GL_VERSION_2_1
// GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
// GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
// GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
// GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
// GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
// GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;


// GL_VERSION_3_0
// GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFNGLCOLORMASKIPROC glColorMaski;
// GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
extern PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
// GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
extern PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
// GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
extern PFNGLENABLEIPROC glEnablei;
// GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
extern PFNGLDISABLEIPROC glDisablei;
// GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
extern PFNGLISENABLEDIPROC glIsEnabledi;
// GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
// GLAPI void APIENTRY glEndTransformFeedback (void);
extern PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
// GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
// GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
extern PFNGLBINDBUFFERBASEPROC glBindBufferBase;
// GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
// GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
// GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
extern PFNGLCLAMPCOLORPROC glClampColor;
// GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
extern PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
// GLAPI void APIENTRY glEndConditionalRender (void);
extern PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
// GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
// GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
// GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
extern PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
// GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
extern PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
// GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
extern PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
// GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
extern PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
// GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
// GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
extern PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
// GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
extern PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
// GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
extern PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
// GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
// GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
// GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
// GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
// GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
// GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
// GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
// GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
// GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
// GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
// GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
// GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
// GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
// GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
extern PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
// GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
// GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
// GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
extern PFNGLUNIFORM1UIPROC glUniform1ui;
// GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
extern PFNGLUNIFORM2UIPROC glUniform2ui;
// GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLUNIFORM3UIPROC glUniform3ui;
// GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLUNIFORM4UIPROC glUniform4ui;
// GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM1UIVPROC glUniform1uiv;
// GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM2UIVPROC glUniform2uiv;
// GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM3UIVPROC glUniform3uiv;
// GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM4UIVPROC glUniform4uiv;
// GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
// GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
extern PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
// GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
// GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
extern PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
// GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
extern PFNGLCLEARBUFFERIVPROC glClearBufferiv;
// GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
extern PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
// GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
extern PFNGLCLEARBUFFERFVPROC glClearBufferfv;
// GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARBUFFERFIPROC glClearBufferfi;
// GLAPI const GLubyte *APIENTRY glGetStringi (GLenum name, GLuint index);
extern PFNGLGETSTRINGIPROC glGetStringi;
// GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
extern PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
// GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
extern PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
// GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
extern PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
// GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
extern PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
// GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
// GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
// GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
extern PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
// GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
extern PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
// GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
extern PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
// GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
extern PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
// GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
// GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
// GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
// GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
// GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
// GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
// GLAPI void APIENTRY glGenerateMipmap (GLenum target);
extern PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
// GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
// GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
// GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
// GLAPI void *APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
// GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
// GLAPI void APIENTRY glBindVertexArray (GLuint array);
extern PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
// GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
extern PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
// GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
extern PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
// GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
extern PFNGLISVERTEXARRAYPROC glIsVertexArray;


// GL_VERSION_3_1
// GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
// GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
extern PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
// GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
extern PFNGLTEXBUFFERPROC glTexBuffer;
// GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
extern PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
// GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
// GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
extern PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
// GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
// GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
extern PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
// GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
extern PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
// GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
// GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
// GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;


// GL_VERSION_3_2
// GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
// GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
// GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
// GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
// GLAPI void APIENTRY glProvokingVertex (GLenum mode);
extern PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
// GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
extern PFNGLFENCESYNCPROC glFenceSync;
// GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
extern PFNGLISSYNCPROC glIsSync;
// GLAPI void APIENTRY glDeleteSync (GLsync sync);
extern PFNGLDELETESYNCPROC glDeleteSync;
// GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
// GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLWAITSYNCPROC glWaitSync;
// GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
extern PFNGLGETINTEGER64VPROC glGetInteger64v;
// GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
extern PFNGLGETSYNCIVPROC glGetSynciv;
// GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
extern PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
// GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
extern PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
// GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
// GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
// GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
// GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
extern PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
// GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);
extern PFNGLSAMPLEMASKIPROC glSampleMaski;


// GL_VERSION_3_3
// GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
// GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
// GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
extern PFNGLGENSAMPLERSPROC glGenSamplers;
// GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
extern PFNGLDELETESAMPLERSPROC glDeleteSamplers;
// GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
extern PFNGLISSAMPLERPROC glIsSampler;
// GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
extern PFNGLBINDSAMPLERPROC glBindSampler;
// GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
extern PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
// GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
// GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
extern PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
// GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
extern PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
// GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
// GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
extern PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
// GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
// GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
// GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
extern PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
// GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
// GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
extern PFNGLQUERYCOUNTERPROC glQueryCounter;
// GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
extern PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
// GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
extern PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
// GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
extern PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
// GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
// GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
// GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
// GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
// GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
// GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
// GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
// GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;


// GL_VERSION_4_0
// GLAPI void APIENTRY glMinSampleShading (GLfloat value);
extern PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
// GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
extern PFNGLBLENDEQUATIONIPROC glBlendEquationi;
// GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
// GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
extern PFNGLBLENDFUNCIPROC glBlendFunci;
// GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
// GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);
extern PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
// GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);
extern PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
// GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
extern PFNGLUNIFORM1DPROC glUniform1d;
// GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
extern PFNGLUNIFORM2DPROC glUniform2d;
// GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLUNIFORM3DPROC glUniform3d;
// GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLUNIFORM4DPROC glUniform4d;
// GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM1DVPROC glUniform1dv;
// GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM2DVPROC glUniform2dv;
// GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM3DVPROC glUniform3dv;
// GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM4DVPROC glUniform4dv;
// GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
// GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
// GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
// GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
// GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
// GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
// GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
// GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
// GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
// GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
extern PFNGLGETUNIFORMDVPROC glGetUniformdv;
// GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
// GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
// GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
// GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
// GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
// GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
extern PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
// GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
// GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
extern PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
// GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
extern PFNGLPATCHPARAMETERIPROC glPatchParameteri;
// GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
extern PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
// GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
extern PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
// GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
// GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
extern PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
// GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
extern PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
// GLAPI void APIENTRY glPauseTransformFeedback (void);
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
// GLAPI void APIENTRY glResumeTransformFeedback (void);
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
// GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
// GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
// GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
extern PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
// GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
extern PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
// GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
extern PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;


// GL_VERSION_4_1
// GLAPI void APIENTRY glReleaseShaderCompiler (void);
extern PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
// GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
extern PFNGLSHADERBINARYPROC glShaderBinary;
// GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
extern PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
// GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);
extern PFNGLDEPTHRANGEFPROC glDepthRangef;
// GLAPI void APIENTRY glClearDepthf (GLfloat d);
extern PFNGLCLEARDEPTHFPROC glClearDepthf;
// GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
extern PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
// GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
extern PFNGLPROGRAMBINARYPROC glProgramBinary;
// GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
extern PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
// GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
extern PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
// GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
extern PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
// GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings);
extern PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
// GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
extern PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
// GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
extern PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
// GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
extern PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
// GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
extern PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
// GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
// GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
extern PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
// GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
// GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
extern PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
// GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
// GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
extern PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
// GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
// GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
extern PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
// GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
// GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
extern PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
// GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
// GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
// GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
// GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
// GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
// GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
extern PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
// GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
// GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
// GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
// GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
// GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
// GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
// GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
// GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
// GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
// GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
// GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
// GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
// GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
// GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
// GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
// GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
// GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
// GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
// GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
// GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
// GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
// GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
// GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
// GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
// GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
// GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
// GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
// GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
// GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
// GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
// GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
// GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
// GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
// GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
// GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
// GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
// GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
// GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
// GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
// GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
// GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
// GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
// GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
// GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
// GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
// GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
// GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
// GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
extern PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
// GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
// GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
extern PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
// GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
extern PFNGLSCISSORARRAYVPROC glScissorArrayv;
// GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern PFNGLSCISSORINDEXEDPROC glScissorIndexed;
// GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
extern PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
// GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);
extern PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
// GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
// GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
extern PFNGLGETFLOATI_VPROC glGetFloati_v;
// GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
extern PFNGLGETDOUBLEI_VPROC glGetDoublei_v;


// GL_VERSION_4_2
// GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
// GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
// GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
// GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
extern PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
// GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
// GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
extern PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
// GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);
extern PFNGLMEMORYBARRIERPROC glMemoryBarrier;
// GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXSTORAGE1DPROC glTexStorage1D;
// GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXSTORAGE2DPROC glTexStorage2D;
// GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXSTORAGE3DPROC glTexStorage3D;
// GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
// GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;


// GL_VERSION_4_3
// GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARBUFFERDATAPROC glClearBufferData;
// GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
// GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
extern PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
// GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
// GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
// GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);
extern PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
// GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
// GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
extern PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
// GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
// GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);
extern PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
// GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
// GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);
extern PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
// GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);
extern PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
// GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
// GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
// GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
// GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
// GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
// GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
extern PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
// GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
extern PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
// GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
// GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
// GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
// GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
// GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
// GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
// GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
extern PFNGLTEXTUREVIEWPROC glTextureView;
// GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
// GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
// GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
// GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
// GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
// GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
// GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
extern PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
// GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
extern PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
// GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);
extern PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
// GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
extern PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
// GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);
extern PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
// GLAPI void APIENTRY glPopDebugGroup (void);
extern PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
// GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
extern PFNGLOBJECTLABELPROC glObjectLabel;
// GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
extern PFNGLGETOBJECTLABELPROC glGetObjectLabel;
// GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);
extern PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
// GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
extern PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;


// GL_VERSION_4_4
// GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
extern PFNGLBUFFERSTORAGEPROC glBufferStorage;
// GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARTEXIMAGEPROC glClearTexImage;
// GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARTEXSUBIMAGEPROC glClearTexSubImage;
// GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
extern PFNGLBINDBUFFERSBASEPROC glBindBuffersBase;
// GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
extern PFNGLBINDBUFFERSRANGEPROC glBindBuffersRange;
// GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);
extern PFNGLBINDTEXTURESPROC glBindTextures;
// GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);
extern PFNGLBINDSAMPLERSPROC glBindSamplers;
// GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);
extern PFNGLBINDIMAGETEXTURESPROC glBindImageTextures;
// GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
extern PFNGLBINDVERTEXBUFFERSPROC glBindVertexBuffers;


// GL_VERSION_4_5
// GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);
extern PFNGLCLIPCONTROLPROC glClipControl;
// GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids);
extern PFNGLCREATETRANSFORMFEEDBACKSPROC glCreateTransformFeedbacks;
// GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer);
extern PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glTransformFeedbackBufferBase;
// GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glTransformFeedbackBufferRange;
// GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param);
extern PFNGLGETTRANSFORMFEEDBACKIVPROC glGetTransformFeedbackiv;
// GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param);
extern PFNGLGETTRANSFORMFEEDBACKI_VPROC glGetTransformFeedbacki_v;
// GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
extern PFNGLGETTRANSFORMFEEDBACKI64_VPROC glGetTransformFeedbacki64_v;
// GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers);
extern PFNGLCREATEBUFFERSPROC glCreateBuffers;
// GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
extern PFNGLNAMEDBUFFERSTORAGEPROC glNamedBufferStorage;
// GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
extern PFNGLNAMEDBUFFERDATAPROC glNamedBufferData;
// GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
extern PFNGLNAMEDBUFFERSUBDATAPROC glNamedBufferSubData;
// GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYNAMEDBUFFERSUBDATAPROC glCopyNamedBufferSubData;
// GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARNAMEDBUFFERDATAPROC glClearNamedBufferData;
// GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
extern PFNGLCLEARNAMEDBUFFERSUBDATAPROC glClearNamedBufferSubData;
// GLAPI void *APIENTRY glMapNamedBuffer (GLuint buffer, GLenum access);
extern PFNGLMAPNAMEDBUFFERPROC glMapNamedBuffer;
// GLAPI void *APIENTRY glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPNAMEDBUFFERRANGEPROC glMapNamedBufferRange;
// GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer);
extern PFNGLUNMAPNAMEDBUFFERPROC glUnmapNamedBuffer;
// GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glFlushMappedNamedBufferRange;
// GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params);
extern PFNGLGETNAMEDBUFFERPARAMETERIVPROC glGetNamedBufferParameteriv;
// GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params);
extern PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glGetNamedBufferParameteri64v;
// GLAPI void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void **params);
extern PFNGLGETNAMEDBUFFERPOINTERVPROC glGetNamedBufferPointerv;
// GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
extern PFNGLGETNAMEDBUFFERSUBDATAPROC glGetNamedBufferSubData;
// GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers);
extern PFNGLCREATEFRAMEBUFFERSPROC glCreateFramebuffers;
// GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glNamedFramebufferRenderbuffer;
// GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param);
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glNamedFramebufferParameteri;
// GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
extern PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glNamedFramebufferTexture;
// GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glNamedFramebufferTextureLayer;
// GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glNamedFramebufferDrawBuffer;
// GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs);
extern PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glNamedFramebufferDrawBuffers;
// GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src);
extern PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glNamedFramebufferReadBuffer;
// GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glInvalidateNamedFramebufferData;
// GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glInvalidateNamedFramebufferSubData;
// GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glClearNamedFramebufferiv;
// GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glClearNamedFramebufferuiv;
// GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
extern PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glClearNamedFramebufferfv;
// GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glClearNamedFramebufferfi;
// GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITNAMEDFRAMEBUFFERPROC glBlitNamedFramebuffer;
// GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target);
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glCheckNamedFramebufferStatus;
// GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param);
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glGetNamedFramebufferParameteriv;
// GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetNamedFramebufferAttachmentParameteriv;
// GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers);
extern PFNGLCREATERENDERBUFFERSPROC glCreateRenderbuffers;
// GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEPROC glNamedRenderbufferStorage;
// GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glNamedRenderbufferStorageMultisample;
// GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params);
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glGetNamedRenderbufferParameteriv;
// GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures);
extern PFNGLCREATETEXTURESPROC glCreateTextures;
// GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer);
extern PFNGLTEXTUREBUFFERPROC glTextureBuffer;
// GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLTEXTUREBUFFERRANGEPROC glTextureBufferRange;
// GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
extern PFNGLTEXTURESTORAGE1DPROC glTextureStorage1D;
// GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLTEXTURESTORAGE2DPROC glTextureStorage2D;
// GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern PFNGLTEXTURESTORAGE3DPROC glTextureStorage3D;
// GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glTextureStorage2DMultisample;
// GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glTextureStorage3DMultisample;
// GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE1DPROC glTextureSubImage1D;
// GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE2DPROC glTextureSubImage2D;
// GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXTURESUBIMAGE3DPROC glTextureSubImage3D;
// GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glCompressedTextureSubImage1D;
// GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glCompressedTextureSubImage2D;
// GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glCompressedTextureSubImage3D;
// GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXTURESUBIMAGE1DPROC glCopyTextureSubImage1D;
// GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE2DPROC glCopyTextureSubImage2D;
// GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXTURESUBIMAGE3DPROC glCopyTextureSubImage3D;
// GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param);
extern PFNGLTEXTUREPARAMETERFPROC glTextureParameterf;
// GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param);
extern PFNGLTEXTUREPARAMETERFVPROC glTextureParameterfv;
// GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param);
extern PFNGLTEXTUREPARAMETERIPROC glTextureParameteri;
// GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params);
extern PFNGLTEXTUREPARAMETERIIVPROC glTextureParameterIiv;
// GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params);
extern PFNGLTEXTUREPARAMETERIUIVPROC glTextureParameterIuiv;
// GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param);
extern PFNGLTEXTUREPARAMETERIVPROC glTextureParameteriv;
// GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture);
extern PFNGLGENERATETEXTUREMIPMAPPROC glGenerateTextureMipmap;
// GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture);
extern PFNGLBINDTEXTUREUNITPROC glBindTextureUnit;
// GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETTEXTUREIMAGEPROC glGetTextureImage;
// GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glGetCompressedTextureImage;
// GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params);
extern PFNGLGETTEXTURELEVELPARAMETERFVPROC glGetTextureLevelParameterfv;
// GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params);
extern PFNGLGETTEXTURELEVELPARAMETERIVPROC glGetTextureLevelParameteriv;
// GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params);
extern PFNGLGETTEXTUREPARAMETERFVPROC glGetTextureParameterfv;
// GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params);
extern PFNGLGETTEXTUREPARAMETERIIVPROC glGetTextureParameterIiv;
// GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params);
extern PFNGLGETTEXTUREPARAMETERIUIVPROC glGetTextureParameterIuiv;
// GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params);
extern PFNGLGETTEXTUREPARAMETERIVPROC glGetTextureParameteriv;
// GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays);
extern PFNGLCREATEVERTEXARRAYSPROC glCreateVertexArrays;
// GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index);
extern PFNGLDISABLEVERTEXARRAYATTRIBPROC glDisableVertexArrayAttrib;
// GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index);
extern PFNGLENABLEVERTEXARRAYATTRIBPROC glEnableVertexArrayAttrib;
// GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer);
extern PFNGLVERTEXARRAYELEMENTBUFFERPROC glVertexArrayElementBuffer;
// GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern PFNGLVERTEXARRAYVERTEXBUFFERPROC glVertexArrayVertexBuffer;
// GLAPI void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
extern PFNGLVERTEXARRAYVERTEXBUFFERSPROC glVertexArrayVertexBuffers;
// GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
extern PFNGLVERTEXARRAYATTRIBBINDINGPROC glVertexArrayAttribBinding;
// GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBFORMATPROC glVertexArrayAttribFormat;
// GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBIFORMATPROC glVertexArrayAttribIFormat;
// GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern PFNGLVERTEXARRAYATTRIBLFORMATPROC glVertexArrayAttribLFormat;
// GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor);
extern PFNGLVERTEXARRAYBINDINGDIVISORPROC glVertexArrayBindingDivisor;
// GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param);
extern PFNGLGETVERTEXARRAYIVPROC glGetVertexArrayiv;
// GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
extern PFNGLGETVERTEXARRAYINDEXEDIVPROC glGetVertexArrayIndexediv;
// GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
extern PFNGLGETVERTEXARRAYINDEXED64IVPROC glGetVertexArrayIndexed64iv;
// GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers);
extern PFNGLCREATESAMPLERSPROC glCreateSamplers;
// GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines);
extern PFNGLCREATEPROGRAMPIPELINESPROC glCreateProgramPipelines;
// GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids);
extern PFNGLCREATEQUERIESPROC glCreateQueries;
// GLAPI void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTI64VPROC glGetQueryBufferObjecti64v;
// GLAPI void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTIVPROC glGetQueryBufferObjectiv;
// GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUI64VPROC glGetQueryBufferObjectui64v;
// GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern PFNGLGETQUERYBUFFEROBJECTUIVPROC glGetQueryBufferObjectuiv;
// GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
extern PFNGLMEMORYBARRIERBYREGIONPROC glMemoryBarrierByRegion;
// GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETTEXTURESUBIMAGEPROC glGetTextureSubImage;
// GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
extern PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glGetCompressedTextureSubImage;
// GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void);
extern PFNGLGETGRAPHICSRESETSTATUSPROC glGetGraphicsResetStatus;
// GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
extern PFNGLGETNCOMPRESSEDTEXIMAGEPROC glGetnCompressedTexImage;
// GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
extern PFNGLGETNTEXIMAGEPROC glGetnTexImage;
// GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
extern PFNGLGETNUNIFORMDVPROC glGetnUniformdv;
// GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
extern PFNGLGETNUNIFORMFVPROC glGetnUniformfv;
// GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params);
extern PFNGLGETNUNIFORMIVPROC glGetnUniformiv;
// GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
extern PFNGLGETNUNIFORMUIVPROC glGetnUniformuiv;
// GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
extern PFNGLREADNPIXELSPROC glReadnPixels;
// GLAPI void APIENTRY glTextureBarrier (void);
extern PFNGLTEXTUREBARRIERPROC glTextureBarrier;


// GL_VERSION_4_6
// GLAPI void APIENTRY glSpecializeShader (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
extern PFNGLSPECIALIZESHADERPROC glSpecializeShader;
// GLAPI void APIENTRY glMultiDrawArraysIndirectCount (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
extern PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glMultiDrawArraysIndirectCount;
// GLAPI void APIENTRY glMultiDrawElementsIndirectCount (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
extern PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glMultiDrawElementsIndirectCount;
// GLAPI void APIENTRY glPolygonOffsetClamp (GLfloat factor, GLfloat units, GLfloat clamp);
extern PFNGLPOLYGONOFFSETCLAMPPROC glPolygonOffsetClamp;


// Loader Function
void glfnlib_load(PFN_loadfunc_gl load);
